{"remainingRequest":"/Users/Macbook/Documents/projects/FreelancerReport2020/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/Macbook/Documents/projects/FreelancerReport2020/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/Macbook/Documents/projects/FreelancerReport2020/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/Macbook/Documents/projects/FreelancerReport2020/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/Macbook/Documents/projects/FreelancerReport2020/docs/6-top-7-freelance-websites-to-hire-developers.md?vue&type=template&id=7ba843d9&","dependencies":[{"path":"/Users/Macbook/Documents/projects/FreelancerReport2020/docs/6-top-7-freelance-websites-to-hire-developers.md","mtime":1586246633004},{"path":"/Users/Macbook/Documents/projects/FreelancerReport2020/node_modules/cache-loader/dist/cjs.js","mtime":1576060144534},{"path":"/Users/Macbook/Documents/projects/FreelancerReport2020/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1576060144779},{"path":"/Users/Macbook/Documents/projects/FreelancerReport2020/node_modules/cache-loader/dist/cjs.js","mtime":1576060144534},{"path":"/Users/Macbook/Documents/projects/FreelancerReport2020/node_modules/vue-loader/lib/index.js","mtime":1576060144779},{"path":"/Users/Macbook/Documents/projects/FreelancerReport2020/node_modules/@vuepress/markdown-loader/index.js","mtime":1582710536446}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6ICIvYXNzZXRzL3RvcC03LWZyZWVsYW5jZS13ZWJzaXRlcy10by1oaXJlLWRldmVsb3BlcnMucG5nIiwKICAgICAgICAgICAgYWx0OiAidG9wLTctZnJlZWxhbmNlLXdlYnNpdGVzLXRvLWhpcmUtZGV2ZWxvcGVycy5wbmciCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDEiLAogICAgICAgIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIGlkOiAid2hpY2gtYXJlLXRoZS1iZXN0LXdlYnNpdGVzLXRvLWhpcmUtZnJlZWxhbmNlLWRldmVsb3BlcnMiCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgIiN3aGljaC1hcmUtdGhlLWJlc3Qtd2Vic2l0ZXMtdG8taGlyZS1mcmVlbGFuY2UtZGV2ZWxvcGVycyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBXaGljaCBhcmUgdGhlIGJlc3Qgd2Vic2l0ZXMgdG8gaGlyZSBmcmVlbGFuY2UgZGV2ZWxvcGVycz8iKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJEaWdpdGl6YXRpb24gYW5kIHRoZSBhZHZlbnQgb2YgdGhlIGZyZWVsYW5jZSBlY29ub215IGhhdmUgY2hhbmdlZCB0aGUgd2F5IGJ1c2luZXNzZXMgd29yay4gQSAiCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly93d3cubW9yZ2Fuc3RhbmxleS5jb20vaWRlYXMvZnJlZWxhbmNlLWVjb25vbXkiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIjIwMTggTW9yZ2FuIFN0YW5sZXkgcmVwb3J0IiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIHBvaW50cyBvdXQgdGhhdCB0aGUgYWJpbGl0eSB0byB3b3JrIGluIHRoZSBjbG91ZCBhbmQgdGhlIGFkdmVudCBvZiBmcmVlbGFuY2luZyBwbGF0Zm9ybXMgaGF2ZSBvcGVuZWQgdXAgbmV3IGNoYW5uZWxzIGZvciBjb21wYW5pZXMgdG8gZmluZCBiZXR0ZXIgdGFsZW50IHN1Y2ggYXMgb25saW5lIGZyZWVsYW5jZSBtYXJrZXRwbGFjZXMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiT25saW5lIG1hcmtldHBsYWNlcyByZXByZXNlbnQgYSByZWxpYWJsZSwgZWZmaWNpZW50IGFuZCBlYXN5IHdheSB0byBmaW5kIHByb2Zlc3Npb25hbCBmcmVlbGFuY2UgZGV2ZWxvcGVycywgYW5kIGNhbiBjYXRlciB0byB5b3VyIHZhcnlpbmcgcmVxdWlyZW1lbnRzIGFuZCBidWRnZXRzLiBBZGRpdGlvbmFsbHksIHlvdSBhcmUgZ3VhcmFudGVlZCBvZiB0aGUgZnJlZWxhbmNlcnPigJkgaW50ZW50IHRvIHdvcmsgb24gdmFyaW91cyBwcm9qZWN0cy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgImh0dHBzOi8vYmxvZy5mbGV4aXBsZS5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMjAvMDIvQ2hvb3NpbmctRnJlZWxhbmNlci1XZWJzaXRlcy0xNng5LTIucG5nIiwKICAgICAgICAgICAgYWx0OiAiQ2hvb3NpbmctRnJlZWxhbmNlci1XZWJzaXRlcy5QTkciCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAidHlwZXMtb2YtZnJlZWxhbmNlLWRldmVsb3Blci13ZWJzaXRlcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjdHlwZXMtb2YtZnJlZWxhbmNlLWRldmVsb3Blci13ZWJzaXRlcyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFR5cGVzIG9mIEZyZWVsYW5jZSBEZXZlbG9wZXIgV2Vic2l0ZXMiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJGcmVlbGFuY2UgZGV2ZWxvcGVyIHdlYnNpdGVzIGNhbiBiZSBzZWdtZW50ZWQgaW50byB0aHJlZSBnZW5lcmFsIGNhdGVnb3JpZXMgaW4gdGVybXMgb2YgaGlyaW5nIHByYWN0aWNlcywgdGFsZW50IHF1YWxpdHksIGFuZCBwcmljaW5nLiBVbmRlcnN0YW5kaW5nIHRoaXMgbnVhbmNlIHdpbGwgaGVscCB5b3UgY2hvb3NlIHRoZSByaWdodCBwbGF0Zm9ybSB0aGF0IGNhbiBjYXRlciB0byB5b3VyIGJ1c2luZXNzIG5lZWRzIHBlcmZlY3RseS4gVGhlIHRocmVlIGNhdGVnb3JpZXMgYXJlOiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoIm9sIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNiaWRkaW5nIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIkJpZGRpbmcgd2Vic2l0ZXMiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjb3JkZXItYmFzZWQiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiT3JkZXItYmFzZWQgd2Vic2l0ZXMiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IG5hbWU6ICJiaWRkaW5nIiB9IH0pLAogICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiN2ZXR0ZWQtdGFsZW50IiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIlZldHRlZCB0YWxlbnQgd2Vic2l0ZXMiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJiaWRkaW5nLXdlYnNpdGVzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNiaWRkaW5nLXdlYnNpdGVzIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQmlkZGluZyBXZWJzaXRlcyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIk9uIHRoZXNlIHBsYXRmb3JtcywgeW91IGNhbiBwb3N0IGEgam9iIHJlcXVpcmVtZW50IGFsb25nIHdpdGggeW91ciBidWRnZXQgYW5kIGZyZWVsYW5jZXJzIHBsYWNlIGEgYmlkIG9uIGl0IHRvIHdpbiB0aGUgcHJvamVjdC4gVGhvdWdoIHRoZXNlIHdlYnNpdGVzIGdpdmUgeW91IHZvbHVtZSBhbmQgYWZmb3JkYWJpbGl0eSAoYXMgZnJlZWxhbmNlcnMgYmlkIGF0IGRpZmZlcmVudCBsZXZlbHMgb2YgcHJpY2luZyksIHRoZSBxdWFsaXR5IGlzIG5laXRoZXIgYXNzdXJlZCBub3IgZWFzaWx5IGlkZW50aWZpYWJsZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJBZGRpdGlvbmFsbHksIHRoZSBtb2RlbCBhbHNvIGRvZXNu4oCZdCBhbGlnbiB3aXRoIHRoZSBuZWVkcyBvZiBxdWFsaXR5IHRhbGVudCDigJMgaGVuY2UsIHRvcCBkZXZlbG9wZXJzIGFyZSBzY2FyY2UgaW4gdGhpcyBoaWdobHkgY29tcGV0aXRpdmUgc3BhY2UsIGFuZCBvbmx5IHBsYWNlIGJpZHMgb24gcHJlbWl1bSBwcm9qZWN0cyBwb3N0ZWQuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiU3VjaCBwbGF0Zm9ybXMgZG8gbm90IGhhdmUgdmV0dGluZyBwcm9jZXNzZXMgaW4gcGxhY2UsIGFuZCByZWx5IGhlYXZpbHkgb24gY3VzdG9tZXIgcmV2aWV3cyAmIHJhdGluZ3Mg4oCTIHdoaWNoIGFyZSBwb29yIGluZGljYXRvcnMgb2Ygc2tpbGwgYW5kIGFyZSB2dWxuZXJhYmxlIHRvIG1hbHByYWN0aWNlLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IG5hbWU6ICJvcmRlci1iYXNlZCIgfSB9KSwKICAgICAgICBfdm0uX3YoIlNpdGVzIHN1Y2ggYXMgVXB3b3JrIGFuZCBHdXJ1IGFyZSBiYXNlZCBvbiB0aGlzIG1vZGVsLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIm9yZGVyLWJhc2VkLXdlYnNpdGVzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNvcmRlci1iYXNlZC13ZWJzaXRlcyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIE9yZGVyLWJhc2VkIFdlYnNpdGVzIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiU2ltaWxhciB0byBiaWRkaW5nIHdlYnNpdGVzLCBidXQgYWltZWQgYXQgc21hbGxlciBwcm9qZWN0cywgb3JkZXItYmFzZWQgZnJlZWxhbmNlIHdlYnNpdGVzIGFyZSBvbmxpbmUgbWFya2V0cGxhY2VzIHRoYXQgYWxsb3cgZnJlZWxhbmNlIHByb2Zlc3Npb25hbHMgKGJvdGggY3JlYXRpdmUgYW5kIHRlY2huaWNhbCkgdG8gZWFybiBtb25leSBzZWxsaW5nIHRoZWlyIHNlcnZpY2VzIGFzIOKAmHByb2R1Y3Rz4oCZLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSBmb2N1cyBpcyBvbiBzaG93Y2FzaW5nIHZlcnkgc3BlY2lmaWMgc2tpbGwtc2V0cywgYW5kIGFkdmVydGlzaW5nIG9uZS1vZmYgam9iIG9yZGVycyByYXRoZXIgdGhhbiBiaWdnZXIgcHJvamVjdHMuIENvbnNlcXVlbnRseSwgdGhlIGVudHJ5IGJhcnJpZXIgZm9yIGZyZWVsYW5jZSBkZXZlbG9wZXJzIHRvIHJlZ2lzdGVyIGFuZCBsYW5kIGpvYnMgb24gdGhlc2UgcGxhdGZvcm1zIGlzIGxvd2VyLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IG5hbWU6ICJ2ZXR0ZWQtdGFsZW50IiB9IH0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICJTaXRlcyBzdWNoIGFzIFVwd29yayBhbmQgR3VydSBhcmUgYmFzZWQgb24gdGhpcyBtb2RlbC5BIGZpdHRpbmcgZXhhbXBsZSBvZiB0aGlzIHR5cGUgb2Ygd2Vic2l0ZSB3b3VsZCBiZSBGaXZlcnIuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAidmV0dGVkLXRhbGVudC13ZWJzaXRlcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjdmV0dGVkLXRhbGVudC13ZWJzaXRlcyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFZldHRlZCBUYWxlbnQgV2Vic2l0ZXMiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUb3AgZnJlZWxhbmNlcnMgcHJlZmVyIHZldHRlZCB0YWxlbnQgcGxhdGZvcm1zIGFzIHRoZXkgZ2V0IHRvIGJlIHBhcnQgb2YgYSBuZXR3b3JrIG9mIHRoZSB2ZXJ5IGNyZWFtIG9mIHRlY2ggdGFsZW50IHdobyBoYXZlIGNsZWFyZWQgc3RyaW5nZW50IHNjcmVlbmluZyBwcm9jZXNzZXMuIEl0IGZvbGxvd3MgdGhhdCB0aGUgbWFpbiBmb2N1cyBvZiB2ZXR0ZWQgdGFsZW50IHdlYnNpdGVzIGlzIHRvIGJ1aWxkIGEgY29tbXVuaXR5IG9mIGV4cGVyaWVuY2VkIGFuZCB0b3AtcXVhbGl0eSBmcmVlbGFuY2UgZGV2ZWxvcGVycyB3aG8gYXJlIGFsd2F5cyBhbGlnbmVkIHRvIHByb2plY3Qgc3VjY2Vzcy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJGcm9tIHRoZSBjbGllbnRz4oCZIHBlcnNwZWN0aXZlLCB0aGlzIG1vZGVsIGFsbG93cyB0aGVtIHRvIHdvcmsgd2l0aCBoaWdobHkgY3VyYXRlZCB0YWxlbnQsIHNhdmluZyB0aW1lICYgZW5lcmd5IG9mIGhhdmluZyB0byBwZXJmb3JtIGV4dGVuc2l2ZSBzY3JlZW5pbmcgdGhlbXNlbHZlcy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJPbmNlIHlvdSBwb3N0IGEgcmVxdWlyZW1lbnQsIHRoZXkgd29yayB3aXRoIHlvdSB0byBjaGFsayBvdXQgdGhlIGJlc3Qgc3RyYXRlZ3kgYW5kIHVsdGltYXRlbHkgY29ubmVjdCB5b3UgdG8gdGhlIGJlc3Qtc3VpdGVkIGZyZWVsYW5jZXIgd2hvIG1hdGNoZXMgeW91ciBzcGVjaWZpYyBuZWVkcy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJGcmVlbGFuY2UgZGV2ZWxvcGVyIHdlYnNpdGVzIHN1Y2ggYXMgRmxleGlwbGUsIFRvcHRhbCwgYW5kIEFyYy5kZXYgZmFsbCB1bmRlciB0aGlzIGhlYWQuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDIiLAogICAgICAgIHsgYXR0cnM6IHsgaWQ6ICJ0b3AtNy13ZWJzaXRlcy1mb3ItaGlyaW5nLWZyZWVsYW5jZS1kZXZlbG9wZXJzIiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiN0b3AtNy13ZWJzaXRlcy1mb3ItaGlyaW5nLWZyZWVsYW5jZS1kZXZlbG9wZXJzIiB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBUb3AgNyBXZWJzaXRlcyBmb3IgSGlyaW5nIEZyZWVsYW5jZSBEZXZlbG9wZXJzIikKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICJodHRwczovL2Jsb2cuZmxleGlwbGUuY29tL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDIwLzAyL0Nob29zaW5nLUZyZWVsYW5jZXItV2Vic2l0ZXMtNHgzLTItMS0xMDI0eDgxOS5wbmciLAogICAgICAgICAgICBhbHQ6ICJDaG9vc2luZy1GcmVlbGFuY2VyLVdlYnNpdGVzLTIuUE5HIgogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJIZXJlIGFyZSB0aGUgdG9wIDcgZnJlZWxhbmNlIGRldmVsb3BlciB3ZWJzaXRlcyBmb3IgaGlyaW5nOiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIl8xLWZsZXhpcGxlIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNfMS1mbGV4aXBsZSIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMS4gRmxleGlwbGUiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2ZsZXhpcGxlLmNvbS8iLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIkZsZXhpcGxlIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGlzIGEgcHJlbWl1bSwgdGVjaC1vbmx5IChkZXZlbG9wZXJzICYgZGVzaWduZXJzKSBvbmxpbmUgcGxhdGZvcm0gdGhhdCBzb3VyY2VzIHRoZSBiZXN0IGZyZWVsYW5jZSB0YWxlbnQgd2hvIGhhdmUgcHJldmlvdXNseSB3b3JrZWQgYXQgdG9wIHRlY2ggY29tcGFuaWVzIHN1Y2ggYXMgQW1hem9uLCBNaWNyb3NvZnQsIEFkb2JlLCBhbW9uZyBvdGhlcnMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiRWFjaCBjYW5kaWRhdGUgaXMgbWFudWFsbHkgdmV0dGVkIHRvIGVuc3VyZSBoaXMvaGVyIHByb2ZpY2llbmN5IGluIG11bHRpcGxlIGNyaXRlcmlhIOKAkyBpbmNsdWRpbmcgdGVjaG5pY2FsIHNraWxsLXNldHMsIHBhc3QgcHJvamVjdHMsIGFiaWxpdHkgdG8gbWVldCBkZWFkbGluZXMgJiB3b3JrIGluIGEgdGVhbSwgYW5kIG92ZXJhbGwgcmVsaWFiaWxpdHksIGJlZm9yZSB0aGV5IGFyZSBpbnZpdGVkIGludG8gdGhlIG5ldHdvcmsuIFdoZXRoZXIgeW91IGFyZSBhIGJvb3RzdHJhcHBlZCBzdGFydC11cCBvciBhbiBNTkMsIHRoaXMgZGV0YWlsZWQgc2NyZWVuaW5nIHByb2Nlc3MgZW5zdXJlcyB0aGF0IHlvdSBnZXQgdG8gd29yayBvbmx5IHdpdGggdGhlIHZlcnkgdG9wIGZyZWVsYW5jZSBkZXZlbG9wZXJzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkZ1cnRoZXIsIEZsZXhpcGxlIHByb3ZpZGVzIGEgc21vb3RoIGhpcmluZyBleHBlcmllbmNlIGJ5IG9mZmVyaW5nIHBlcnNvbmFsaXNlZCByZWNvbW1lbmRhdGlvbnMgYW5kIGZsZXhpYmxlIHRpbWUtYmFzZWQgcGF5bWVudCBtb2RlbHMuIFByb2Nlc3NlcyBhcmUga2VwdCBhbGlnbmVkIHRvIHlvdXIgcHJvamVjdCBzdWNjZXNzIGJ5IGVuc3VyaW5nIHJlc3BvbnNpdmUgc3VwcG9ydCB0aHJvdWdob3V0IHRoZSBsZW5ndGggb2YgdGhlIGVuZ2FnZW1lbnQuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDQiLCB7IGF0dHJzOiB7IGlkOiAicHJpY2luZyIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcHJpY2luZyIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIFByaWNpbmc6IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiRmxleGlwbGUgcHJvdmlkZXMgZGV2ZWxvcGVycyBhdCBhZmZvcmRhYmxlIHJhdGVzIG9mICQzMCB0byAkODAgcGVyIGhvdXIuIFRoZXJlIGFyZSBubyByZWNydWl0aW5nIGZlZXMgdGhhdCBhcHBseSBhbmQgZGV2ZWxvcGVycyBjYW4gZ2V0IHN0YXJ0ZWQgb24geW91ciBwcm9qZWN0IHdpdGhpbiBhIHdlZWsuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDQiLCB7IGF0dHJzOiB7IGlkOiAicHJvcyIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcHJvcyIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIFByb3M6IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiUmlnb3JvdXMgdmV0dGluZyBwcm9jZXNzIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJIaWdobHkgZXhwZXJpZW5jZWQgZGV2ZWxvcGVycyIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiUGVyc29uYWxpemVkIHJlY29tbWVuZGF0aW9ucyIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiUmlzay1mcmVlIHRyaWFsIHBlcmlvZCIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiRmFzdCBvbi1ib2FyZGluZyIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiR3JlYXQgY3VzdG9tZXIgc2VydmljZSAmIHN1cHBvcnQiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogImNvbnMiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2NvbnMiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBDb25zOiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkJlaW5nIGEgcmVsYXRpdmVseSBuZXcgbmV0d29yaywgZnJlZWxhbmNlcnMgbWlnaHQgbm90IGFsd2F5cyBiZSBhdmFpbGFibGUgaW4gZnJpbmdlIHRlY2hub2xvZ2llcy4gQnV0IHdpdGggYSBoaWdobHkgcmVzcG9uc2l2ZSB0ZWFtLCB5b3Ugd291bGQgYmUgdXBkYXRlZCBhYm91dCB0aGlzIHNvb24uIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIl8yLXRvcHRhbCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjXzItdG9wdGFsIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAyLiBUb3B0YWwiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3d3dy50b3B0YWwuY29tLyIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiVG9wdGFsIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGlzIGFuIGVzdGFibGlzaGVkIHBsYXllciBpbiB0aGUgcHJlbWl1bSBmcmVlbGFuY2UgZGV2ZWxvcGVyc+KAmSBtYXJrZXQuIEl0IGhhcyBleHBhbmRlZCBpdHMgcHJlc2VuY2UgZnJvbSBlbmdpbmVlcmluZyB0byBhbHNvIGluY2x1ZGUgZGVzaWduLCBmaW5hbmNpYWwgY29uc3VsdGluZywgcHJvamVjdCBtYW5hZ2VtZW50IGFuZCBwcm9kdWN0IG1hbmFnZW1lbnQuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVG9wdGFs4oCZcyBVU1AgaXMgaXRzIHJpZ29yb3VzIHNjcmVlbmluZyBwcm9jZXNzIGFuZCBsYXJnZSBjb21tdW5pdHkuIEl0cyBtdWx0aS1zdGFnZSB2ZXR0aW5nIHByb2Nlc3MgY29uc2lzdHMgb2YgY29kZSByZXZpZXdzLCBwb3J0Zm9saW8gcmV2aWV3LCByZWFsLXRpbWUgdGVzdGluZywgYW5kIGFuIEVuZ2xpc2ggbGFuZ3VhZ2Ugc2tpbGwgdGVzdC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoNCIsIHsgYXR0cnM6IHsgaWQ6ICJwcmljaW5nLTIiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3ByaWNpbmctMiIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUHJpY2luZzoiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJTdGFydC11cHMgY2FuIGZpbmQgVG9wdGFsIHByaWNleSBkdWUgdG8gaXRzIGhpZ2ggaG91cmx5IHJhdGVzICgkODAtJDIwMCkgZHJpdmVuIGJ5IGhpZ2ggY29tbWlzc2lvbiByYXRlcy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoNCIsIHsgYXR0cnM6IHsgaWQ6ICJwcm9zLTIiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3Byb3MtMiIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIFByb3M6IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiSGlnaGx5IGV4cGVyaWVuY2VkIGRldmVsb3BlcnMiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlN0cmluZ2VudCB2ZXR0aW5nIHByb2Nlc3MiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlBlcnNvbmFsaXNlZCByZWNvbW1lbmRhdGlvbnMiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlRyaWFsIHBlcmlvZCBvZmZlcmVkIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJFc3RhYmxpc2hlZCBjb21wYW55IildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoNCIsIHsgYXR0cnM6IHsgaWQ6ICJjb25zLTIiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2NvbnMtMiIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIENvbnM6IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiQmVpbmcgYSBsYXJnZSBjb21wYW55LCB0aGVyZSBhcmUgaGlnaCBvdmVyaGVhZHMsIHdoaWNoIGFyZSByZWZsZWN0ZWQgaW4gc2lnbmlmaWNhbnQgY29tbWlzc2lvbnMgYW5kIGhpZ2ggcHJpY2VzIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiSXRzIHN1cHBvcnQgaGFzIGJlZW4gY3JpdGljaXNlZCBieSBtYW55IHRvIGJlIHBvb3IiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIk5vdCB2aWFibGUgZm9yIHNtYWxsIHByb2plY3RzIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJfMy1hcmMtZGV2IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNfMy1hcmMtZGV2IiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiAzLiBBcmMuZGV2IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9hcmMuZGV2LyIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiQXJjLmRldiIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBpbml0aWFsbHkgc3RhcnRlZCBhcyBDb2RlbWVudG9yWCwgYSBtZW50b3JpbmcgcGxhdGZvcm0gZm9yIGRldmVsb3BlcnMgdG8gc2VlayBoZWxwIGZyb20gdGhlIG5ldHdvcmsgZm9yIHByb2JsZW0tc29sdmluZywgc2tpbGwgaW1wcm92ZW1lbnQsIGV0Yy4gVG9kYXksIGl0IGNvbnRpbnVlcyB0byBjYXJyeSB0aGUgdGFnIG9mIGEg4oCcbGVhZGluZyBvbi1kZW1hbmQgbWVudG9yc2hpcCBwbGF0Zm9ybSBmb3IgZGV2ZWxvcGVyc+KAnSBidXQgaGFzIGFsc28gZGV2ZWxvcGVkIGEgc29sdXRpb24gZm9yIGhpcmluZyBmcmVlbGFuY2UgZGV2ZWxvcGVycy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJBa2luIHRvIG90aGVyIHByZW1pdW0gd2Vic2l0ZXMsIEFyYy5kZXYgaGFzIGEgdmV0dGluZyBwcm9jZXNzIGluIHBsYWNlIHRoYXQgdXRpbGl6ZXMgaGlnaC1jYWxpYmVyIGFzc2Vzc21lbnQgdG9vbHMgdG8gZW5zdXJlIHF1YWxpdHkuIEFyY+KAmXMgVVNQIGlzIGl0cyBmb2N1cyBvbiBlbmFibGluZyBjb21wYW5pZXMgdG8gaGlyZSBmdWxsLXRpbWUgcmVtb3RlLXdvcmtpbmcgZGV2ZWxvcGVycyBmb3IgdGhlIGxvbmctdGVybS4gQXJjIGFsc28gdGFrZXMgY2FyZSBvZiBjb21wbGlhbmNlLCBwYXlyb2xsLCBhbmQgYmVuZWZpdHMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDQiLCB7IGF0dHJzOiB7IGlkOiAicHJpY2luZy0zIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNwcmljaW5nLTMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFByaWNpbmc6IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSG91cmx5IHJhdGVzIGZvciBmcmVlbGFuY2VycyBzdGFydCBmcm9tICQ2MCBhbmQgY2FuIGdvIHRvICQyMDArLCB3aGljaCBtYWtlcyB0aGUgcGxhdGZvcm0gdW5zdWl0YWJsZSBmb3Igc3RhcnQtdXBzIG9yIGZvciBzbWFsbCBwcm9qZWN0cy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoNCIsIHsgYXR0cnM6IHsgaWQ6ICJwcm9zLTMiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3Byb3MtMyIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIFByb3M6IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiU3Ryb25nIHZldHRpbmcgcHJvY2VzcyIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiU29mdHdhcmUgZGV2ZWxvcGVycyBhdmFpbGFibGUgaW4gbmljaGUgc2tpbGwtc2V0IildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoNCIsIHsgYXR0cnM6IHsgaWQ6ICJjb25zLTMiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2NvbnMtMyIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIENvbnM6IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiSGlnaGx5IGV4cGVuc2l2ZSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiSXQgaGFzIGdyb3duIGFzIGEgbWVudG9yc2hpcCBwbGF0Zm9ybSB3aXRoIHRoZSB0ZWNoIHRhbGVudCBwbGF0Zm9ybSBiZWluZyBmYWlybHkgbmFzY2VudCIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJfNC1odWJzdGFmZi10YWxlbnQiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI180LWh1YnN0YWZmLXRhbGVudCIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDQuIEh1YnN0YWZmIFRhbGVudCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vdGFsZW50Lmh1YnN0YWZmLmNvbS8iLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIkh1YnN0YWZmIFRhbGVudCIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBpcyByZWxhdGl2ZWx5IG5ldyBhbmQgb2ZmZXJzIGEgY29tcGxldGVseSBmcmVlIHNlcnZpY2UgZm9yIGNvbXBhbmllcyBsb29raW5nIHRvIGhpcmUgaW5kZXBlbmRlbnQgZnJlZWxhbmNlcnMgYXMgd2VsbCBhcyBhZ2VuY2llcy4gV2l0aCBtb3JlIGVtcGhhc2lzIG9uIHRoZSB1c2Ugb2Ygc29mdHdhcmUgdG8gbWF0Y2ggZnJlZWxhbmNlcnMgd2l0aCBwcm9qZWN0cywgdGhlcmUgaXMgYWxzbyBubyBtYW51YWwgdmV0dGluZyBwcm9jZXNzIHRvIGFzY2VydGFpbiB0aGVpciBxdWFsaXR5LiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkl0IGlzIGEgdHJhbnNwYXJlbnQgbWFya2V0cGxhY2UgdGhhdCBhbGxvd3MgY2xpZW50cyB0byBicm93c2UgZnJlZWxhbmNlcnMgYW5kIGdldCBpbiB0b3VjaCB3aXRoIHRoZW0gZGlyZWN0bHkuIEl0IGZ1bmN0aW9ucyBtb3JlIGxpa2UgYSBkYXRhYmFzZSBvZiBmcmVlbGFuY2VycyB3aG8gc2lnbiB1cCBvbiB0aGUgcGxhdGZvcm0sIHdpdGggbm8gYWRkaXRpb25hbCBmZWF0dXJlcyB0byBoZWxwIHlvdSBpbiBoaXJpbmcgdGhlIGJlc3QgdGFsZW50IGZvciB5b3VyIG5lZWRzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogInByaWNpbmctNCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcHJpY2luZy00IiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBQcmljaW5nOiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJJdOKAmXMgZnJlZSBmb3IgYm90aCBidXNpbmVzcyBvd25lcnMgKGNsaWVudHMpIGFuZCBmcmVlbGFuY2Vycy4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoNCIsIHsgYXR0cnM6IHsgaWQ6ICJwcm9zLTQiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3Byb3MtNCIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIFByb3M6IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiRmlsdGVycyB0byBuYXJyb3cgc2VhcmNoIGluIGZpbmRpbmcgZnJlZWxhbmNlcnMiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkZyZWUiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlN1aXRhYmxlIGZvciBzbWFsbCB3b3JrIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoNCIsIHsgYXR0cnM6IHsgaWQ6ICJjb25zLXMiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2NvbnMtcyIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIENvbnM6cyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkEgcmVsYXRpdmVseSBzbWFsbCBwb29sIG9mIGZyZWVsYW5jZXJzIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJVbnJlbGlhYmxlIGpvYiBzb3VyY2VzIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJObyB2ZXR0aW5nIHByb2Nlc3MiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkh1Z2UgaW52ZXN0bWVudCByZXF1aXJlZCBpbiB0ZXJtcyBvZiB0aW1lIHRvIGZpbmQgcXVhbGl0eSB0YWxlbnQiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiXzUtdXB3b3JrIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNfNS11cHdvcmsiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDUuIFVwd29yayIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJBIHJlc3VsdCBvZiB0aGUgRWxhbmNlIGFuZCBPZGVzayBtZXJnZXIsICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3Vwd29yay5jb20vIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJVcHdvcmsiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgaXMgb25lIG9mIHRoZSBsYXJnZXN0IGFuZCBtb3N0IHBvcHVsYXIgZnJlZWxhbmNlIG1hcmtldHBsYWNlcyB3aXRoIGEgYmlkZGluZyBzeXN0ZW0uIEl0IGlzIG5vdCBhIGRldmVsb3Blci1vbmx5IHBsYXRmb3JtIGFuZCBjYXRlcnMgdG8gbW9yZSB0aGFuIDUwIGNhdGVnb3JpZXMgb2Ygam9icyByYW5naW5nIGZyb20gZGF0YSBlbnRyeSB0byBncmFwaGljIGRlc2lnbi4gSXQgZG9lc27igJl0IGhhdmUgYSB2ZXR0aW5nIHByb2Nlc3Mgd2l0aCB0aGUgb251cyBvbiB5b3UgdG8gZXZhbHVhdGUgdGFsZW50LiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogInByaWNpbmctNSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcHJpY2luZy01IiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBQcmljaW5nOiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlVwd29yayBmb2N1c2VzIG9uIHZvbHVtZSBhbmQgYWZmb3JkYWJpbGl0eSwgd2l0aCBmcmVlbGFuY2VycyBiaWRkaW5nIHRvIGdldCBjbGllbnRzIGF0IGxvdy1jb3N0IHJhdGVzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogInByb3MtNSIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcHJvcy01IiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgUHJvczoiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJBIGxhcmdlIHBvb2wgb2YgZnJlZWxhbmNlcnMiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkZpbmQgdGFsZW50IGJhc2VkIG9uIGJ1ZGdldCIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiSGlyZSB0YWxlbnQgZm9yIHByb2plY3Qgc2VnbWVudHMgcmF0aGVyIHRoYW4gYW4gZW50aXJlIHByb2plY3QiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVGllcmVkLXN5c3RlbSBmZWVzIChwYXktYXMteW91LWdvKSIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDQiLCB7IGF0dHJzOiB7IGlkOiAiY29ucy00IiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNjb25zLTQiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBDb25zOiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIk5vIHNlcmlvdXMgdmV0dGluZyBwcm9jZXNzIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJIdWdlIGludmVzdG1lbnQgcmVxdWlyZWQgaW4gdGVybXMgb2YgdGltZSB0byBmaW5kIHF1YWxpdHkgdGFsZW50IgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlBvb3Igc3VjY2VzcyByYXRlIG9mIHByb2plY3RzIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJfNi1ndXJ1IiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNfNi1ndXJ1IiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgNi4gR3VydSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vd3d3Lmd1cnUuY29tLyIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiR3VydSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiB3YXMgc2V0IHVwIGJhY2sgaW4gMTk5OCBhcyBlTW9vbmxpZ2h0ZXIsIGZvciBoaWdobHkgcXVhbGlmaWVkIHdvcmtlcnMgc2Vla2luZyBzaG9ydC10ZXJtLCBvbmUtb2ZmIGNvbnRyYWN0cy4gT3ZlciB0aGUgeWVhcnMsIGl0IGhhcyBzbG93bHkgZGl2ZXJzaWZpZWQgZnJvbSBiZWluZyBhIGRldmVsb3Blci1vbmx5IHBsYXRmb3JtIGFuZCBncm93biBpbnRvIG90aGVyIHN0cmVhbXMgbGlrZSBhY2NvdW50aW5nLCBhZG1pbiwgZGVzaWduaW5nIGFuZCBvdGhlcnMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiU2ltaWxhciB0byBVcHdvcmssIEd1cnUgaXMgYSBwdXJlIGZyZWVsYW5jZSBtYXJrZXRwbGFjZS4gSXQgaGFzIGEgbGFyZ2UgcG9vbCBvZiB3b3JrZXJzIGZyb20gYWNyb3NzIHRoZSBnbG9iZSBhbmQgaXMgZm9jdXNlZCBvbiB2b2x1bWUgYW5kIGFmZm9yZGFiaWxpdHkuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQWxzbywgdGhlcmUgaXMgbm8gc3RyaWN0IHZldHRpbmcgb3Igc2NyZWVuaW5nIHByb2Nlc3MgaW4gcGxhY2UuIFRoaXMgbWVhbnMgeW914oCZZCBoYXZlIHRvIHB1dCBpbiBzaWduaWZpY2FudCB3b3JrIGluIGludGVydmlld2luZyBhbmQgcXVhbGlmeWluZyBhcHBsaWNhbnRzLCBhcyByYXRpbmdzIGFyZSBub3QgYSByZWxpYWJsZSBiZW5jaG1hcmsgb2YgZW5zdXJpbmcgcXVhbGl0eS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoNCIsIHsgYXR0cnM6IHsgaWQ6ICJwcmljaW5nLTYiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3ByaWNpbmctNiIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUHJpY2luZzoiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJHdXJ1IGdpdmVzIHlvdSBtb3JlIGZsZXhpYmlsaXR5IHRoYW4gVXB3b3JrIGluIHRlcm1zIG9mIHF1YWxpdHkgYW5kIHByaWNpbmcsIGFsbG93aW5nIHlvdSB0byBwaWNrIGZyb20gaGlnaGx5IHF1YWxpZmllZCB0byBsb3ctY29zdCBkZXZlbG9wZXJzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogInByb3MtNiIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcHJvcy02IiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgUHJvczoiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkZsZXhpYmlsaXR5IHRvIGNob29zZSB0YWxlbnQgYmFzZWQgb24gY29zdCBvciBxdWFsaXR5IikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJQYXkgb25seSBmb3IgcHJvY2Vzc2luZyBwYXltZW50cyAobm8gcHJvamVjdC1yZWxhdGVkIGNoYXJnZXMpIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogImNvbnMtNSIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjY29ucy01IiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgQ29uczoiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJObyB2ZXR0aW5nIHByb2Nlc3MiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlRpbWUgYW5kIGVmZm9ydCBuZWVkZWQgdG8gZmluZCBxdWFsaXR5IGRldmVsb3BlcnMiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIl83LWZpdmVyciIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjXzctZml2ZXJyIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiA3LiBGaXZlcnIiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3d3dy5maXZlcnIuY29tLyIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiRml2ZXJyIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGlzIHRoZSBwbGF0Zm9ybSB0aGF0IHBvcHVsYXJpemVkIHRoZSBvcmRlci1iYXNlZCBjb25jZXB0IG9mIGVuZ2FnaW5nIGZyZWVsYW5jZXJzLiBTZXJ2aWNlcyBhcmUgdXN1YWxseSBvZmZlcmVkIGZvciBvbmUtb2ZmLCBzbWFsbCwgc3BlY2lmaWMgdGFza3MsIGFuZCBjYXRlcnMgdG8gbW9yZSB0aGFuIDI1MCBjYXRlZ29yaWVzIOKAkyBmcm9tIHZvaWNlLW92ZXJzIGFuZCBsb2dvIGRlc2lnbiB0byB3ZWJzaXRlIGFuZCBhcHAgZGV2ZWxvcG1lbnQuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiRnJlZWxhbmNlcnMgYXJlIHRlcm1lZCDigJhTZWxsZXJz4oCZIGFuZCBvZmZlciB0aGVpciBzZXJ2aWNlcyBmb3IgZXZlcnl0aGluZyBpbiB0aGUgcHJpY2UgcmFuZ2Ugb2YgJDUgdG8gJDk5NS4gVGhleSBjYW4gY2hvb3NlIHRvIHNlbGwgdGhlaXIgc2VydmljZXMgYXQgdGhyZWUgZGlmZmVyZW50IHByaWNlIHBvaW50cyBiYXNlZCBvbiB0aGUgY29tcGxleGl0eSBvZiB0aGUgdGFzay4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUbyBoZWxwIGNsaWVudHMgaW4gY2hvb3NpbmcgdGhlIHJpZ2h0IGZyZWVsYW5jZXIsIEZpdmVyciBwcm92aWRlcyBhIOKAmFNlbGxlciBMZXZlbOKAmSwgd2hpY2ggaXMgYSBzdGF0dXMgZWFybmVkIGJ5IHRoZSBmcmVlbGFuY2VyIGJhc2VkIG9uIHJhdGluZ3MsIHBlcmZvcm1hbmNlLCBxdWFsaXR5IG9mIHBhc3Qgd29yaywgZXRjLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogInByb3MtNyIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcHJvcy03IiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgUHJvczoiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJBIHdpZGUgcG9vbCBvZiBmcmVlbGFuY2VycyIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiQ2hlYXAgYW5kIGNvc3QtZWZmZWN0aXZlIHNlcnZpY2VzIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJFYXN5LXRvLXVzZSB0b29scyBmb3IgZmlsdGVyaW5nIGFwcGxpY2FudHMiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlJlc3BvbnNpdmUgY3VzdG9tZXIgc3VwcG9ydCBhbmQgcmVzb2x1dGlvbiBjZW50ZXIiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogImNvbnMtNiIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjY29ucy02IiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgQ29uczoiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJObyB2ZXR0aW5nIG9mIGFwcGxpY2FudHMiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIklkZWFsIG9ubHkgZm9yIHZlcnkgc21hbGwgdGFza3MsIG5vdCBleHRlbnNpdmUgcHJvamVjdHMvIGVuZ2FnZW1lbnQiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDIiLAogICAgICAgIHsgYXR0cnM6IHsgaWQ6ICJob3ctdG8tY2hvb3NlLXRoZS1yaWdodC1wbGF0Zm9ybS1mb3IteW91ci1idXNpbmVzcyIgfSB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiI2hvdy10by1jaG9vc2UtdGhlLXJpZ2h0LXBsYXRmb3JtLWZvci15b3VyLWJ1c2luZXNzIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIEhvdyB0byBDaG9vc2UgdGhlIFJpZ2h0IFBsYXRmb3JtIGZvciB5b3VyIEJ1c2luZXNzPyIpCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkVhY2ggd2Vic2l0ZSBtZW50aW9uZWQgYWJvdmUgaGFzIGl0cyBvd24gdXNlLWNhc2Ug4oCTIHRoZSBrZXkgaXMgdG8gdW5kZXJzdGFuZCB0aGVzZSBudWFuY2VzIGFuZCBjaG9vc2UgdGhlIG9uZSB3aGljaCBhbGlnbnMgd2l0aCB5b3VyIHJlcXVpcmVtZW50cywgZGVwZW5kaW5nIG9uIHBhcnRpY3VsYXJzIGxpa2UgaG93IGJpZyBvciBzbWFsbCB5b3VyIHByb2plY3QgaXMsIHdoYXQgdGVjaG5vbG9neSBpdCBjYWxscyBmb3IsIGFuZCB3aGF0IHlvdXIgYnVkZ2V0IGlzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkJlbG93IGFyZSB0aHJlZSBicm9hZCBjYXRlZ29yaWVzIHRoYXQgcHJvamVjdHMgY2FuIGJlIGNsYXNzaWZpZWQgaW50bywgd2hpY2ggd2lsbCBndWlkZSB5b3UgdGhyb3VnaCB5b3VyIGRlY2lzaW9uLW1ha2luZyBwcm9jZXNzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInNob3J0LWFuZC1jb3N0LWNvbnN0cmFpbmVkLXByb2plY3QiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3Nob3J0LWFuZC1jb3N0LWNvbnN0cmFpbmVkLXByb2plY3QiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBTaG9ydCBhbmQgY29zdC1jb25zdHJhaW5lZCBwcm9qZWN0IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiV2hlbiB5b3UgaGF2ZSBhIHNtYWxsIHByb2plY3QsIHRoYXQgYWxtb3N0IHF1YWxpZmllcyBhcyBhIHRhc2sgcmF0aGVyIHRoYW4gYSBwcm9qZWN0LCBiaWRkaW5nIHdlYnNpdGVzIGFuZCBvcmRlci1iYXNlZCB3ZWJzaXRlcyBzdWNoIGFzICBVcHdvcmssIEd1cnUsIGFuZCBGaXZlcnIgYXJlIHRoZSBvbmVzIHRvIGNvbnNpZGVyLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSB2b2x1bWUgb2YgZnJlZWxhbmNlcnMgb24gdGhlc2UgcGxhdGZvcm1zIHdpbGwgYWxsb3cgeW91IHRvIGZpbmQgZnJlZWxhbmNlcnMgaW4geW91ciBidWRnZXQgcmFuZ2UgYW5kIGFsc28gd291bGQgYmUgd2lsbGluZyB0byB0YWtlIHVwIHNtYWxsZXIgcHJvamVjdHMuIEluIGFueSBjYXNlLCBtYWtlIHN1cmUgdG8gc3BlbmQgc3VmZmljaWVudCB0aW1lIGluIGV2YWx1YXRpbmcgdGhlIGZyZWVsYW5jZXJzIHByaW9yIHRvIHN0YXJ0aW5nIHRoZSBwcm9qZWN0cy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJsb25nZXItYW5kLWFmZm9yZGFibGUtcHJvamVjdHMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2xvbmdlci1hbmQtYWZmb3JkYWJsZS1wcm9qZWN0cyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIExvbmdlciBhbmQgYWZmb3JkYWJsZSBwcm9qZWN0cyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIklmIHlvdSBoYXZlIGEgbG9uZy10ZXJtIHByb2plY3QgYnV0IHdhbnQgdG8ga2VlcCBjb3N0cyBsb3csIHRoZW4gcHVyZS1tYXJrZXRwbGFjZSBmcmVlbGFuY2Ugd2Vic2l0ZXMgbGlrZSBVcHdvcmsgYW5kIEd1cnUgYXJlIHRoZSByaWdodCBmaXQuIFlvdSBnZXQgdm9sdW1lIGluIGFwcGxpY2F0aW9ucyBhcyB3ZWxsIGFzIGEgd2lkZSBwb29sIG9mIGZyZWVsYW5jZXJzIHJhbmdpbmcgZnJvbSBsZXNzIGV4cGVyaWVuY2VkIHRvIGhpZ2hseSBleHBlcmllbmNlZCBkZXZlbG9wZXJzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlF1YWxpdHkgd2lsbCBzdGlsbCBiZSBhbiBpc3N1ZSwgYW5kIHlvdSB3b3VsZCBuZWVkIHRvIHB1dCBpbiB0aGUgaGFyZCB3b3JrIG9mIHZldHRpbmcgZGV2ZWxvcGVycyBiYXNlZCBvbiB2YXJpb3VzIGZhY3RvcnMg4oCTIHJlbHlpbmcgb25seSBvbiB0aGVpciByYXRpbmdzIHdpbGwgbm90IGdpdmUgeW91IHRoZSBjb21wbGV0ZSBwaWN0dXJlLiBEaWdnaW5nIGRlZXBlciBpbnRvIHRoZWlyIHBvcnRmb2xpb3MgYW5kIHBhc3Qgd29yayBleHBlcmllbmNlIGlzIHJlcXVpcmVkIHRvIHNlbGVjdCB0aGUgZnJlZWxhbmNlcnMgd2hvIGNhbiBkZWxpdmVyIHJlYXNvbmFibGUgcXVhbGl0eSBhdCB0aGUgcHJpY2UgeW91IGhhdmUgaW4gbWluZC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJZb3UgY291bGQgYWxzbyBjb25zaWRlciBhZmZvcmRhYmxlIGZyZWVsYW5jZSBkZXZlbG9wZXIgd2Vic2l0ZXMgc3VjaCBhcyBGbGV4aXBsZSB3aG8gY2FuIHByb3ZpZGUgdmV0dGVkIGRldmVsb3BlcnMgZnJvbSAkMzAtODAvIGhvdXIuIFN1Y2ggcGxhdGZvcm1zIGRvIHRoZSBoYXJkIHdvcmsgZm9yIHlvdSBpbiBldmFsdWF0aW5nIGRldmVsb3BlcnMsIGFuZCBoZW5jZSB3b3VsZCBiZSB3ZWxsLXBsYWNlZCB0byByZWNvbW1lbmQgdGhlIGJlc3QgZml0IGZvciB5b3VyIG5lZWRzLiBBZGRpdGlvbmFsbHksIHRoZWlyIDEtd2VlayB0cmlhbCBwZXJpb2QgYWxsb3dzIHlvdSB0byBzdGFydCB0aGUgZW5nYWdlbWVudCB3aXRob3V0IGFueSByaXNrLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInF1YWxpdHktaXMtZXZlcnl0aGluZyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjcXVhbGl0eS1pcy1ldmVyeXRoaW5nIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUXVhbGl0eSBpcyBldmVyeXRoaW5nIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiRXZlbnR1YWxseSwgcXVhbGl0eSBpcyB3aGF0IHNldHMgYXBhcnQgdGhlIGhpZ2gtcGVyZm9ybWVycyBmcm9tIHRoZSByZXN0LiBCaWcgb3Igc21hbGwsIG5vIG1hdHRlciB0aGUgc2l6ZSBvZiB0aGUgdGFzaywgaWYgeW91ciBsb25nLXRlcm0gZm9jdXMgaXMgY29uc2lzdGVudCB2YWx1ZS1iYXNlZCBncm93dGggYW5kIGV4Y2VsbGVuY2UsIHRoZW4gbG9vayBubyBmdXJ0aGVyIHRoYW4gcHJlbWl1bSB0YWxlbnQgcGxhdGZvcm1zLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkZvciBpbnN0YW5jZSwgb24gRmxleGlwbGUsIHlvdSB3aWxsIG9ubHkgZmluZCB0aGUgdG9wIDElIGZyZWVsYW5jZSBkZXZlbG9wZXJzIHdobyBnbyB0aHJvdWdoIGFuIGV4aGF1c3RpdmUgaGlyaW5nIHByb2Nlc3MsIHdoaWxlIFRvcHRhbCBnaXZlcyB5b3UgZWxpdGUgZnJlZWxhbmNlcnMgb24gYSB3aWRlciByYW5nZSBvZiB2ZXJ0aWNhbHMuIENvbXBsZXggcHJvZHVjdHMgcmVxdWlyZSB0aGUgYmVzdCB0YWxlbnQsIGFuZCB0aGVzZSBuZXR3b3JrcyBhcmUgaWRlYWwgdG8gYnVpbGQgdGhlbS4iCiAgICAgICAgKQogICAgICBdKQogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}