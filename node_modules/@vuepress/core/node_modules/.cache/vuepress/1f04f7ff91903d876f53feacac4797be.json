{"remainingRequest":"/Users/Macbook/Documents/projects/remotework2020_new/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/Macbook/Documents/projects/remotework2020_new/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/Macbook/Documents/projects/remotework2020_new/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/Macbook/Documents/projects/remotework2020_new/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/Macbook/Documents/projects/remotework2020_new/docs/2-state-of-remote-work.md?vue&type=template&id=1d2b97b6&","dependencies":[{"path":"/Users/Macbook/Documents/projects/remotework2020_new/docs/2-state-of-remote-work.md","mtime":1578908766339},{"path":"/Users/Macbook/Documents/projects/remotework2020_new/node_modules/cache-loader/dist/cjs.js","mtime":1576060144534},{"path":"/Users/Macbook/Documents/projects/remotework2020_new/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1576060144779},{"path":"/Users/Macbook/Documents/projects/remotework2020_new/node_modules/cache-loader/dist/cjs.js","mtime":1576060144534},{"path":"/Users/Macbook/Documents/projects/remotework2020_new/node_modules/vue-loader/lib/index.js","mtime":1576060144779},{"path":"/Users/Macbook/Documents/projects/remotework2020_new/node_modules/@vuepress/markdown-loader/index.js","mtime":1576060144870}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}