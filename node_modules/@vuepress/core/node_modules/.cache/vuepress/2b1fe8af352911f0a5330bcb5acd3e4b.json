{"remainingRequest":"/Users/Macbook/Documents/projects/remotework2020_new/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/Macbook/Documents/projects/remotework2020_new/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/Macbook/Documents/projects/remotework2020_new/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/Macbook/Documents/projects/remotework2020_new/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/Macbook/Documents/projects/remotework2020_new/docs/3a-how-to-manage-a-remote-team.md?vue&type=template&id=27afa26e&","dependencies":[{"path":"/Users/Macbook/Documents/projects/remotework2020_new/docs/3a-how-to-manage-a-remote-team.md","mtime":1579088124816},{"path":"/Users/Macbook/Documents/projects/remotework2020_new/node_modules/cache-loader/dist/cjs.js","mtime":1576060144534},{"path":"/Users/Macbook/Documents/projects/remotework2020_new/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1576060144779},{"path":"/Users/Macbook/Documents/projects/remotework2020_new/node_modules/cache-loader/dist/cjs.js","mtime":1576060144534},{"path":"/Users/Macbook/Documents/projects/remotework2020_new/node_modules/vue-loader/lib/index.js","mtime":1576060144779},{"path":"/Users/Macbook/Documents/projects/remotework2020_new/node_modules/@vuepress/markdown-loader/index.js","mtime":1576060144870}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogeyBzcmM6ICIvYXNzZXRzL21hbmFnaW5nX2FfcmVtb3RlX3RlYW0ucG5nIiwgYWx0OiAiIiB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiU28geW91IGhhdmUgbWFkZSB0aGUgY2hvaWNlIHRvIGJ1aWxkIGEgcmVtb3RlIHRlYW0uIEFzIGEgY29uc2VxdWVuY2UsIHlvdSBoYXZlIGJlZW4gYWJsZSB0byBnZXQgYSBidW5jaCBvZiB0YWxlbnRlZCBpbmRpdmlkdWFscyBkaXN0cmlidXRlZCBhY3Jvc3MgYSBmZXcgY291bnRyaWVzIPCfmI4gLiBOb3cgY29tZXMgdGhlIGRpZmZpY3VsdCBwYXJ0IG9mIGFjdHVhbGx5IG1hbmFnaW5nIGEgYnJpbGxpYW50IHRlYW0gLSB3aGlsZSB0aGV5IG1pZ2h0IGJlIGdvb2QgaW5kaXZpZHVhbCBwZXJmb3JtZXJzLCB5b3Ugd291bGQgbGlrZSB0aGVtIHRvIGNvbGxhYm9yYXRlIGFuZCBiZWNvbWUgYSBncmVhdCBjb2xsZWN0aXZlIHVuaXQuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQSBmZXcgY3JpdGljYWwgZmFjdG9ycyBuZWVkIHRvIGJlIGV4ZWN1dGVkIHN1Y2Nlc3NmdWxseSBmb3IgdGhlIG92ZXJhbGwgcmVtb3RlIGluaXRpYXRpdmUgdG8geWllbGQgdGhlIGRlc2lyZWQgcmVzdWx0cy4gTGV0J3MgZ2V0IGludG8gZWFjaCBpbiBkZXRhaWw6IgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjXzEtY29tbXVuaWNhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgIF92bS5fdigiQ29tbXVuaWNhdGlvbiIpCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI18yLWRvY3VtZW50YXRpb24iIH0gfSwgWwogICAgICAgICAgICBfdm0uX3YoIkRvY3VtZW50YXRpb24iKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIl8zLW9uYm9hcmRpbmciIH0gfSwgW192bS5fdigiT25ib2FyZGluZyIpXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIl80LWN1bHR1cmUiIH0gfSwgW192bS5fdigiQ3VsdHVyZSIpXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMS1jb21tdW5pY2F0aW9uIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNfMS1jb21tdW5pY2F0aW9uIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgMS4gQ29tbXVuaWNhdGlvbiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkluIGFuIGluLW9mZmljZSBzaXR1YXRpb24sIHdlIGhhdmUgdGhlIGJlbmVmaXQgb2YgaGF2aW5nIHRoZSBwaHlzaWNhbCBwcmVzZW5jZSBvZiB0aGUgcGVyc29uIHdlIGFyZSBpbnRlcmFjdGluZyB3aXRoLiBXZSBjYW4gY29udmV5IGluZm9ybWF0aW9uIHRvIG9uZS1hbm90aGVyIGluIGJpdHMgJiBwaWVjZXMuIFRoaXMgaXMgY2xlYXJseSBpbmVmZmljaWVudCwgYnV0IHdlIGtub3cgdGhhdCBhbnkgcGVyc29uIGNhbiBlYXNpbHkgcmVhY2ggb3V0IGZvciBhZGRpdGlvbmFsIGNvbnRleHQuIEFsc28sIGRvIHlvdSBmZWVsIHRoZSBuZWVkIHRvIGlkZWF0ZT8gSnVzdCBncmFiIGEgbWVldGluZyByb29tISIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgIkNsaWVudE9ubHkiLAogICAgICAgIFsKICAgICAgICAgIF9jKCJUd2VldCIsIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBpZDogIjEyMDMyNjgyMDc2NTU3NjgwNjQiLAogICAgICAgICAgICAgIG9wdGlvbnM6IHsgY29udmVyc2F0aW9uOiAibm9uZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIk9uIHRoZSBvdGhlciBoYW5kLCBhbiBhc3BlY3QgdGhhdCBnZXRzIGFmZmVjdGVkIGFsbW9zdCBpbW1lZGlhdGVseSB3aGlsZSB3b3JraW5nIHJlbW90ZWx5LCBpcyBjb21tdW5pY2F0aW9uIGJldHdlZW4gdGVhbSBtZW1iZXJzLiBOb25lIG9mIHRoZSBlYXNlIG9mIGNvbGxhYm9yYXRpb24gZXhwZXJpZW5jZWQgaW4gYSBjby1sb2NhdGVkIHNjZW5hcmlvIGlzIGF2YWlsYWJsZSB0byByZW1vdGUgd29ya2Vycy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGlzIGNvdWxkIHdvcmsgYWR2YW50YWdlb3VzbHkgdG9vIC0gaGF2aW5nIGd1aWRlbGluZXMgaW4gY29tbXVuaWNhdGlvbiBlbnN1cmVzIHRoYXQgaW5kaXZpZHVhbCBwcm9kdWN0aXZpdHkgaXNuJ3QgbG9zdCBieSBwb29yIHBsYW5uaW5nLCBjb25zdGFudCBtZWV0aW5ncywgZXRjLiBIb3dldmVyLCB3aGF0IGFyZSB0aGVzZSBndWlkZWxpbmVzIG9yIHRlbmV0cyB0aGF0IHdlIG5lZWQgdG8gYmUgYXdhcmUgb2Y/IE91ciBndWVzdHMgb24gdGhlIFJlbW90ZSBXb3JraW5nIFNob3csIERhcnJlbiAoR2l0bGFiKSBhbmQgU2NvdHQgKEludmlzaW9uKSBoYWQgYSBsb3Qgb2Ygc3Ryb25nIG9waW5pb25zIGFyb3VuZCB0aGlzLiBXZSBoYXZlIHVzZWQgdGhvc2UgY29udmVyc2F0aW9ucyBhbmQgb3VyIHBlcnNvbmFsIGV4cGVyaWVuY2UgdG8gYnJlYWsgaXQgZG93biB0byB0aGUgZm9sbG93aW5nOiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjYS1kZWZhdWx0LXRvLWFzeW5jaHJvbm91cyIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIkEpIERlZmF1bHQgdG8gQXN5bmNocm9ub3VzIikKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI2ItZm9jdXMtb24tb3V0cHV0IiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiQikgRm9jdXMgb24gT3V0cHV0IikKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBhdHRyczogeyBocmVmOiAiI2MtY2hvb3NlLXRoZS1yaWdodC1jaGFubmVsLWZvci1jb21tdW5pY2F0aW9uIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCJDKSBDaG9vc2UgdGhlIHJpZ2h0IGNoYW5uZWwgZm9yIGNvbW11bmljYXRpb24iKV0KICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImEtZGVmYXVsdC10by1hc3luY2hyb25vdXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2EtZGVmYXVsdC10by1hc3luY2hyb25vdXMiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBBKSBEZWZhdWx0IHRvIEFzeW5jaHJvbm91cyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlJlbW90ZSB3b3JrIGFsbG93cyB1cyB0byBoaXJlIGFjcm9zcyB0aW1lem9uZXMgYW5kIGFsc28gZW1wb3dlcnMgdXMgdG8gY2hvb3NlIG91ciBvd24gd29yayB0aW1pbmdzLiBCdXQsIHRoaXMgYWxzbyBtZWFucyB0aGF0IGl0IGlzIHZlcnkgbGlrZWx5IHlvdXIgY28td29ya2VyIGlzIG5vdCBhbHdheXMgd29ya2luZyBhdCB0aGUgc2FtZSB0aW1lIGFzIHlvdS4gU28sIHdoYXQgZG8geW91IGRvIHdoZW4geW91IG5lZWQgdG8gY2xhcmlmeSBzb21ldGhpbmc/IgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQXN5bmNocm9ub3VzIGNvbW11bmljYXRpb24gKG9yIGFzeW5jIGZvciBzaG9ydCkgaXMgdGhlIGFuc3dlci4gQXN5bmMgYmFzaWNhbGx5IHJlcHJlc2VudHMgYSBzaXR1YXRpb24gd2hlbiBhIHBlcnNvbiBzZW5kcyBhIG1lc3NhZ2UgdG8gYW5vdGhlciB3aXRob3V0IGV4cGVjdGluZyBhbiBpbW1lZGlhdGUgcmVzcG9uc2UsIGFzIG9wcG9zZWQgdG8gc3luY2hyb25vdXMgY29tbXVuaWNhdGlvbiBpbiB3aGljaCBpbmRpdmlkdWFscyBhcmUgZXhjaGFuZ2luZyBpbmZvcm1hdGlvbiB0aGF0IGlzIGltbWVkaWF0ZWx5IGNvbnN1bWVkIGFuZCBkZW1hbmRzIGEgcmVzcG9uc2UuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlNvLCB3aGF0IGFyZSB0aGUgYWR2YW50YWdlcyBvZiB3b3JraW5nIGFzeW5jaHJvbm91c2x5OiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiSW5jcmVhc2VkIHByb2R1Y3Rpdml0eSIpXSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiOiBDb25zdGFudCBpbnRlcnJ1cHRpb25zIGZyb20gY28td29ya2Vycywgd2hpY2ggaXMgYSBjb25zcGljdW91cyBmZWF0dXJlIG9mIHN5bmNocm9ub3VzIGNvbW11bmljYXRpb24sIGlzIGVudGlyZWx5IGF2b2lkZWQgaW4gYXN5bmMuIEl0IGFsbG93cyB5b3UgdG8gcGxhbiB5b3VyIHdvcmtkYXkgYW5kIHRvIGZvY3VzIGVudGlyZWx5IG9uIHRoZSBjdXJyZW50IHRhc2sgYXQgaGFuZCwgd2l0aG91dCBhbm90aGVyIHRlYW0gbWVtYmVyIGJyZWF0aGluZyBkb3duIHlvdXIgbmVjayBmb3IgYSByZXNwb25zZS4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJJbXByb3ZlZCBjb21tdW5pY2F0aW9uIildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICI6IFRoZSByZWFsaXNhdGlvbiB0aGF0IGluY29tcGxldGUgY29udGV4dCBvZiBhIHBhcnRpY3VsYXIgdGFzayB3b3VsZCByZXN1bHQgaW4gZGVsYXlzIGR1ZSB0byB0aGUgdW5hdmFpbGFiaWxpdHkgb2YgaW1tZWRpYXRlIGV4cGxhbmF0aW9uLCBpbmNlbnRpdmlzZXMgYWxsIGludm9sdmVkIHRvIGNvbW11bmljYXRlIHRoZWlyIHRob3VnaHRzIGluIGEgY2xlYXIgYW5kIGNvbXByZWhlbnNpdmUgZmFzaGlvbiBhdCB0aGUgb3V0c2V0LiBUaGlzIGhlbHBzIGluIGJldHRlciBwbGFubmluZyBhbmQgbGVhZHMgdG8gbGVzc2VyIHVubmVjZXNzYXJ5IHdvcmsgYW5kIGJhY2sgJiBmb3J0aC4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJFeHRlbnNpdmUgZG9jdW1lbnRhdGlvbiIpXSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiOiBBc3luYyBkaXJlY3RseSBwcm9tb3RlcyBvbmUgb2YgdGhlIG90aGVyIHRlbmV0cyBvZiByZW1vdGUgd29ya2luZyAtIGRvY3VtZW50YXRpb24uIFB1dHRpbmcgZG93biBldmVyeXRoaW5nIGluIHdyaXRpbmcgZW5zdXJlcyB0aGF0IHRoZXJlIGlzIGEgc2luZ2xlIHNvdXJjZSBvZiB0cnV0aCB0aGF0IGNhbiBhbHdheXMgYmUgcmV0dXJuZWQgdG8gaW4gY2FzZSBvZiBhbnkgY29uZnVzaW9uLiIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkJldHRlciB3b3JrLWxpZmUgYmFsYW5jZSIpXSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiOiBCZXlvbmQganVzdCBpbmNyZWFzaW5nIHBlcnNvbmFsIHByb2R1Y3Rpdml0eSwgaGF2aW5nIGNvbnRyb2wgb3ZlciB5b3VyIHdvcmtkYXkgYW5kIGJlaW5nIGFibGUgdG8gdGltZSB5b3VyIHJlc3BvbnNlcywgcmVzdWx0cyBpbiBhIHN1cGVyaW9yIHdvcmstbGlmZSBiYWxhbmNlIGFuZCBsZXNzIHN0cmVzcy4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiYmxvY2txdW90ZSIsIFsKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJQcm8tdGlwOiIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgT25lIGludGVyZXN0aW5nIG51Z2dldCB0aGF0IERhcnJlbiBzbGlwcGVkIGluIHdoaWxlIGRpc2N1c3NpbmcgaG93IHRoZXkgaW1wbGVtZW50IGFzeW5jaHJvbm91cyB0aHJvdWdoIFNsYWNrLCB3YXMgdGhhdCBHaXRMYWIgZG9lc27igJl0IHN1YnNjcmliZSB0byBhIHRpZXIgdGhhdCBzdG9yZXMgbWVzc2FnZXMgcGVycGV0dWFsbHkuIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJUaGlzIGZvcmNlcyBldmVyeW9uZSB0byBkb2N1bWVudCBpbmZvcm1hdGlvbiB0aGF0IGlzIGNyaXRpY2FsIHRvIHRoZSBwcm9qZWN0IG9yIGEgbGF0ZXIgdGltZSBpbiB0aGUgZnV0dXJlIGluIEdpdExhYiBwcm9qZWN0IG1hbmFnZW1lbnQvIGlzc3VlcyByYXRoZXIgdGhhbiByZWx5aW5nIG9uIGEgc2hvcnQtdGVybSBjb252ZW5pZW50IG9wdGlvbiBvbiBTbGFjay4iCiAgICAgICAgICApLAogICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgIF9jKCJlbSIsIFsKICAgICAgICAgICAgX3ZtLl92KCJMaXN0ZW4gdG8gdGhpcyBzcGVjaWZpYyBzZWN0aW9uIGhlcmUgb24gdGhlIHBvZGNhc3Q6IikKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICJodHRwczovL3NvdW5kY2xvdWQuY29tL3JlbW90ZS10b29scy90aGUtcmVtb3RlLXdvcmtpbmctc2hvdy1kYXJyZW4tbXVycGgtYWxsLXJlbW90ZS1jdWx0dXJlLWN1cmF0b3ItYXQtZ2l0bGFiI3Q9NDk6MjgiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX2MoImVtIiwgW192bS5fdigiTGluayIpXSksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAnIldlIGRvIG5vdCBwYXkgZm9yIGEgdGllciBpbiBTbGFjayB0aGF0IHdvdWxkIGtlZXAgeW91ciBtZXNzYWdlcyBwZXJwZXR1YWxseSBhbmQgaXTigJlzIGludGVudGlvbmFsLiBXZSBhY3R1YWxseSBkb27igJl0IHdhbnQgcGVvcGxlIGRlZmF1bHRpbmcgdG8gdXNpbmcgU2xhY2sgaWYgdGhleSBjb3VsZCBjb252ZXkgcHJvamVjdC1yZWxhdGVkIGluZm9ybWF0aW9uIHRocm91Z2ggR2l0TGFiIGlzc3VlcyBvciBtZXJnZSByZXF1ZXN0cyB3aGljaCBhcmUgbXVjaCBtb3JlIHBlcm1hbmVudCBhbmQgYXJlIGRpcmVjdGx5IHJlbGF0ZWQgdG8gdGhlIHdvcmsuIEZyb20gYW4gZWZmaWNpZW5jeSBzdGFuZHBvaW50LCBpZiB5b3UgaGF2ZSBzb2x2ZWQgc29tZXRoaW5nIG9uIHNsYWNrIHRoZW4geW91IGhhdmUgdG8gdHJhbnNsYXRlIHRoYXQgb3ZlciB0byBhIG1lcmdlIHJlcXVlc3Qgb3IgdG8gYW4gaXNzdWUgdG8gbWFrZSBzb21ldGhpbmcgaGFwcGVuLuKAnScKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICAgIF92bS5fdigiLSBEYXJyZW4gTXVycGgsIEFsbCBSZW1vdGUgQ3VsdHVyZSBDdXJhdG9yLCBHaXRsYWIiKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJiLWZvY3VzLW9uLW91dHB1dCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjYi1mb2N1cy1vbi1vdXRwdXQiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBCKSBGb2N1cyBvbiBvdXRwdXQiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJBbiBpbmZhbW91cyBjb25jZXB0IG9mIHRoZSBpbi1vZmZpY2Ugc2V0dGluZyBpcyB0byAnRmFjZSBUaW1lJzsgaS5lLiB0byBqdXN0IHNwZW5kIGhvdXJzIGluIHRoZSBvZmZpY2UgdG8gaW1wcmVzcyB5b3VyIGJvc3MgZXZlbiBpZiB5b3UgYXJlIGRvbmUgd2l0aCB5b3VyIHdvcmsuIFNvdW5kcyBsaWtlIGEgcmlkaWN1bG91cyB0aGluZyB0byBkbyBidXQgaXQgaXMgaGlnaGx5IHByZXZhbGVudC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJJbiBhIHJlbW90ZSB3b3JrIHNldHRpbmcsIGJ5IGRlZmluaXRpb24gaXQgaXNuJ3QgcG9zc2libGUgdG8gJ0ZhY2UgVGltZScuIEhlcmUgaXMgd2hlcmUgdGhpbmdzIGNhbiBnZXQgYSBiaXQgdHJpY2t5IGZvciBwZW9wbGUgd2hvIGNvbWUgZnJvbSBhIHRyYWRpdGlvbmFsIG1pbmRzZXQgb2YgY2xvY2tpbmcgaG91cnMgb24gdGhlIGpvYi4gV2hpbGUgd29ya2luZyByZW1vdGVseSwgdHJ1c3QgZm9ybXMgdGhlIGZvdW5kYXRpb24gb2Ygd29ya2luZyBhbmQgdGhlIGZvY3VzIHNoaWZ0cyBlbnRpcmVseSB0byB0aGUgZW5kIG91dHB1dCBhcyB0aGF0IGlzIHRoZSBvbmUgdGFuZ2libGUgYXNwZWN0IHRoYXQgY2FuIGJlIHNlZW4gYnkgYWxsIC0gc3BlbmRpbmcgbGF0ZSBuaWdodHMgdG8gaW1wcmVzcyB5b3VyIHN1cGVyaW9ycyBoZWxwcyBubyBvbmUuIFRoaXMgbWVhbnMgdGhhdCB5b3VyIHRlYW0gY2FuIGNvbmNlbnRyYXRlIG9uIHRoaW5ncyB0aGF0IGFjdHVhbGx5IG1hdHRlciAtIHRvIGdldCB3b3JrIGRvbmUsIHJhdGhlciB0aGFuIGp1c3QgcG9zdHVyaW5nLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkhvd2V2ZXIsIHN1Y2ggYSBjdWx0dXJlIG5lZWRzIHRvIGJlIGluY3VsY2F0ZWQgYW1vbmdzdCBhbGwuIEluIGEgY2hhdCB3aXRoICIKICAgICAgICApLAogICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICBfdm0uX3YoIlNjb3R0LCBEaXJlY3RvciBvZiBDdXN0b21lciBBY3F1aXNpdGlvbiBhdCBJbnZpc2lvbiwiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgaGUgbWVudGlvbmVkIGhvdyBzb21lIG1hbmFnZXJzIGNvdWxkIGJlIHRlbXB0ZWQgdG8gdXNlIGEgcmVtb3RlIGNvcm9sbGFyeSBvZiB0aGUgaW4tb2ZmaWNlICdGYWNlIFRpbWUnIC0gY2hlY2tpbmcgdGhlIGdyZWVuIHN5bWJvbCBvZiBiZWluZyBcIkF2YWlsYWJsZVwiIG9uIFNsYWNrLiBUaGlzIGlzIGFuIGV4dHJlbWVseSBzbGlwcGVyeSBwYXRoIHRvIGJlIG9uIGFuZCBjYW4gc3BvaWwgdGhlIGV0aG9zIG9mIHlvdXIgdGVhbS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGlzIGF0dGl0dWRlIG1pZ2h0IGJlY29tZSBhIHJlYWN0aW9uYXJ5IG1lYXN1cmUgdG8gdGFja2xlIGluZGl2aWR1YWxzIHdobyBhcmUgcGVyZm9ybWluZyBwb29ybHkuIFNjb3R0IHN1Z2dlc3RlZCB0aGF0IHN1Y2ggY2FzZXMgY2FuIGJlIGFkZHJlc3NlZCBpbiB0aGUgZm9sbG93aW5nIG1hbm5lcjoiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkNoYXQgMS1vbi0xIildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICI6IEZpcnN0bHksIHRoZSBwZXJzb24gd2hvIGlzIHBlcmZvcm1pbmcgcG9vcmx5IG5lZWRzIHRvIHVuZGVyc3RhbmQgdGhlIHNwaXJpdCB3aXRoIHdoaWNoIHlvdSBhcmUgYXBwcm9hY2hpbmcgdG8gc29sdmUgdGhlIHNpdHVhdGlvbiwgd2hpY2ggaXMgdG8gZ2V0IHRoZSBwZXJmb3JtYW5jZSBvbiB0cmFjayBhbmQgdGhhdCB5b3UgYXJlIGdvaW5nIHRvIGJlIHdvcmtpbmcgY29uc3RydWN0aXZlbHkgdG93YXJkcyByZWFjaGluZyB0aGF0IG91dGNvbWUuIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiVGhpcyBpcyBiZXN0IGRpc2N1c3NlZCBvbiBhIHZpZGVvIGNhbGwgYW5kIGFsc28gMS1vbi0xIC0gYmVpbmcgYSBkZWxpY2F0ZSBjb252ZXJzYXRpb24gaXQgaXMgaW1wb3J0YW50IHRoYXQgc3RhdGVtZW50cyBhcmUgbm90IG1pc2ludGVycHJldGVkIChhbmQgaGVuY2Ugc2hvdWxkIGJlIGhhZCBvbiB2aWRlbyBjYWxsIHJhdGhlciB0aGFuIG9uIGNoYXQpIGFuZCBpbiBhbiBlbnZpcm9ubWVudCB3aGVyZSB0aGV5IGRvbid0IGZlZWwgY29ybmVyZWQgKHRoZXJlZm9yZSwgdGhlIDEtb24tMSkuIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQmUgc3VwZXIgc3BlY2lmaWMgb24gb3V0cHV0IildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICI6IEJyZWFrIHRoZSB0YXNrcyBkb3duIHRvIGEgbWFuYWdlYWJsZSBncmFudWxhcml0eSBhbmQgbWFrZSB0aGUgZXhwZWN0ZWQgd29yayBleHRyZW1lbHkgY2xlYXIuIFRoZSBnb2FsIGlzIHRvIGVuc3VyZSB0aGF0IG1pc3NlZCBkZWFkbGluZXMgYXJlbid0IGR1ZSB0byBsYWNrIG9mIGNsYXJpdHkgaW4gdGFza3MuIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiS2VlcCBzaG9ydCB0dXJuYXJvdW5kcyIpXSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAnOiBBcyBhIGNvbnNlcXVlbmNlIG9mIG1ha2luZyB0YXNrcyBncmFudWxhciwgeW91IGNhbiBub3cga2VlcCBkZWFkbGluZXMgb2Ygc2hvcnRlciBkdXJhdGlvbnMuIFRoaXMgYWxsb3dzIGZvciBhbnkgbGFwc2VzIHRvIGJlIGltbWVkaWF0ZWx5IGNvcnJlY3RlZCBhbmQgdG8gc2V0IHRoZSByaWdodCBleHBlY3RhdGlvbnMgc29vbi4gQXMgeW91IG1pZ2h0IGhhdmUgZmlndXJlZCwgdGhlIGlkZWEgaXMgdG8gIm1pY3JvbWFuYWdlIGluIHRlcm1zIG9mIG91dHB1dCIgTk9UIHRoZWlyIHdvcmtpbmcgc3R5bGUuJwogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImgzIiwKICAgICAgICB7IGF0dHJzOiB7IGlkOiAiYy1jaG9vc2UtdGhlLXJpZ2h0LWNoYW5uZWwtZm9yLWNvbW11bmljYXRpb24iIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2MtY2hvb3NlLXRoZS1yaWdodC1jaGFubmVsLWZvci1jb21tdW5pY2F0aW9uIiB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBDKSBDaG9vc2UgdGhlIHJpZ2h0IGNoYW5uZWwgZm9yIGNvbW11bmljYXRpb24iKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJOb3QgYWxsIGNvbnZlcnNhdGlvbnMgYXJlIGVxdWFsIG9yIG9mIHRoZSBzYW1lIGtpbmQuIFRoZXJlZm9yZSwgYSBzaW5nbGUgbW9kZSBvZiBjb21tdW5pY2F0aW9uIGRvZXNuJ3Qgd29yayBub3IgZG9lcyBhIGhhcGhhemFyZCBjaG9pY2Ugb2YgY2hhbm5lbC4gUHV0dGluZyBzb21lIHN0cnVjdHVyZSBhcm91bmQgdGhpcyBoZWxwcywgc28gdGhhdCB0ZWFtIG1lbWJlcnMgZmluZCBpdCBlYXN5IHRvIGRlY2lkZSB0aGUgYXBwcm9wcmlhdGUgY2hhbm5lbCB0byBjb21tdW5pY2F0ZSBvbiBmb3IgYSBwYXJ0aWN1bGFyIGNvbnRleHQuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIHBhcmFtZXRlcnMgb24gd2hpY2ggc3VjaCBhIHN0cnVjdHVyZSBjYW4gYmUgZGVmaW5lZCBvbiBhcmU6IgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJEZWZhdWx0IG1vZGUiKV0pLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIjogQWxpZ24gb24gd2hhdCB0aGUgZGVmYXVsdCBtb2RlIG9mIGNvbW11bmljYXRpb24gd291bGQgYmU6IG1haWwsIGNoYXQgb3IgY2FsbC4gVG8gaW1wbGVtZW50IGFzeW5jLCBpdCBpcyB1bmxpa2VseSB0aGF0IGl0IHdvdWxkIGJlIGNhbGwuIEhvd2V2ZXIsIGV2ZW4gaW4gdGhlIG1haWwgb3IgY2hhdCBzaXR1YXRpb25zLCBkZWZpbmUgZ3VpZGVsaW5lcyBzdWNoIGFzIHRoZSBpbmRpdmlkdWFscyB3aG8gc2hvdWxkIGJlIG1hcmtlZCBmb3IgYSBwYXJ0aWN1bGFyIGNvbnZlcnNhdGlvbiwgdGhlIHJpZ2h0IG1ldGhvZCBmb3IgZm9sbG93LXVwcywgZXRjLiBNb3N0IHJlbW90ZSBjb21wYW5pZXMgZGVmYXVsdCB0byBzbGFjayBvciBhIGNvbXBhcmFibGUgdG9vbC4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJJbmZvcm1hdGlvbiBjb250ZXh0IildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICI6IFdlIGRpc2N1c3NlZCBpbiB0aGUgZmlyc3QgcG9pbnQgdGhhdCBpdCBpcyBpbXBvcnRhbnQgdG8gZGVmYXVsdCB0byBhc3luYy4gSGVuY2UsIGZvciBtb3N0IGNvbW11bmljYXRpb24gaXQgaXMgYmVzdCB0byBzZW5kIHdyaXR0ZW4gbWVzc2FnZXMgZm9yIHdoaWNoIHlvdSBkb24ndCBleHBlY3QgaW1tZWRpYXRlIHJlc3BvbnNlcy4gSG93ZXZlciwgZXZlbiBpbiBhc3luYywgaXQgaXMgaW1wb3J0YW50IHRvIGNhdGVnb3Jpc2UgdGhlIGluZm9ybWF0aW9uLiBGb3IgZXhhbXBsZSwgcmVndWxhciBvciBvbmdvaW5nIHByb2plY3QgY29udmVyc2F0aW9ucyB3b3VsZCBsaWtlbHkgYmUgb24gc2xhY2sgd2l0aCB0aGUgY29uY2VybmVkIGluZGl2aWR1YWwgb3IgdGhlIHByb2plY3QgbWFuYWdlbWVudCBzb2Z0d2FyZSBiZWluZyB1c2VkLCB3aGlsZSBpbiB0aGUgaW5pdGlhbCBwbGFubmluZyBzdGFnZSBhbGwgaW5mb3JtYXRpb24gd291bGQgYmUgaW4gYSBjZW50cmFsaXNlZCBkb2N1bWVudC4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJVcmdlbmN5IildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICI6IEhvdyB0aW1lLWNyaXRpY2FsIGlzIHRoZSBpbmZvcm1hdGlvbiB0aGF0IHlvdSBuZWVkIGZyb20gc29tZW9uZSBlbHNlPyBJbiB0aGUgZW5kIHN0YWdlcyBvZiBhIHByb2plY3QsIGl0IGlzIGxpa2VseSB0aGF0IHN1Y2ggc2l0dWF0aW9ucyBjYW4gYXJpc2UuIEF0IHN1Y2ggdGltZXMsIGl0IG1pZ2h0IG1ha2Ugc2Vuc2UgdG8gcmVjb2duaXNlIHRoZSBuZWVkIGZvciBhIGNoYW5uZWwgdGhhdCBldmVyeW9uZSBuZWVkcyB0byBiZSBhdmFpbGFibGUgb24gLSBmb3IgZS5nLiBwaG9uZSwgem9vbSwgZXRjLiIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIk1lc3NhZ2Ugc2Vuc2l0aXZpdHkiKV0pLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIjogU29tZSBjb252ZXJzYXRpb25zIHN1Y2ggYXMgc2hhcmluZyBvZiBmZWVkYmFjayBhcmUgYmV0dGVyIGRvbmUgb24gdmlkZW8gY2FsbHMsIHdoZXJlIHRoZSBpbmRpdmlkdWFscyBjYW4gYWxzbyBpbmZlciBmcm9tIHZlcmJhbCBjdWVzIHJhdGhlciB0aGFuIGp1c3QgcmVseWluZyBvbiB3b3Jkcy4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiYmxvY2txdW90ZSIsIFsKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJQcm8tdGlwOiIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgT24gb3VyIHBvZGNhc3RzIHdpdGggQnJpZSAoRmxleEpvYnMpIGFuZCBTY290dCAoSW52aXNpb24pLCBib3RoIG1lbnRpb25lZCB0aGUgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJ1IiwgW19jKCJlbSIsIFtfdm0uX3YoImltcG9ydGFuY2Ugb2YgdXNpbmcgZW1vdGljb25zIildKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIHRvIHNvZnRlbiB0aGUgbWVzc2FnZSB3aGlsZSBjaGF0dGluZyBvbiBTbGFjay4gU2luY2UgaW4gd3JpdHRlbiBjb21tdW5pY2F0aW9uIG9mdGVuIHRoZSBzcGlyaXQgYmVoaW5kIHRoZSBtZXNzYWdlIGNhbiBiZSBtaXNpbnRlcnByZXRlZCwgZW1vdGljb25zIGhlbHAgaW4gcmVhc3N1cmluZyB0aGUgcmVjaXBpZW50IG9mIHRoZSBuYXR1cmUgb2YgdGhlIG1lc3NhZ2UuIFNvLCBiZSBnZW5lcm91cyB3aXRoIGVtb3RpY29ucyB1c2VkIGluIHlvdXIgY29udmVyc2F0aW9ucyEiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIk51bWJlciBvZiBwZW9wbGUgaW52b2x2ZWQiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiOiBHZXR0aW5nIGEgaHVnZSBudW1iZXIgb2YgcGVvcGxlIG9uIGEgY2FsbCBpcyBhbHdheXMgYSBjaGFsbGVuZ2UgYW5kIG9mdGVuIHVucHJvZHVjdGl2ZS4gVGhlcmVmb3JlLCBvdGhlciB0aGFuIGZvciBwcm9qZWN0IGJlZ2lubmluZ3MgYW5kIHNjaGVkdWxlZCBjaGVja3BvaW50cywgYSBjYWxsIGZvciBhIGxhcmdlIHBhcnQgb2YgdGhlIHRlYW0gbWlnaHQgbm90IG1ha2UgdG90YWwgc2Vuc2UuIEl0IGlzIGJlc3QgdG8gYnJlYWsgY2hhbGxlbmdlcyBpbnRvIHNtYWxsZXIgcHJvYmxlbXMgYW5kIHRvIGhhdmUgbWljcm8gY29udmVyc2F0aW9ucyBhcm91bmQgdGhlbS4gRm9yIGxhcmdlciB0ZWFtIGRpc2N1c3Npb25zLCBzbGFjayBvciBvcmdhbmlzaW5nIGl0IGFyb3VuZCBhIHByb2plY3QgbWFuYWdlbWVudCB0b29sIG1pZ2h0IG1ha2UgbW9yZSBzZW5zZS4iCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiRm9yIHR3byB0byB0aHJlZSBpbmRpdmlkdWFscywgaXQgaGFzIHRvIGJlIGRlY2lkZWQgb24gYSBjYXNlLXRvLWNhc2UgYmFzaXMuIFRoZSBkZWZhdWx0IGlzIHdyaXR0ZW4gY29tbXVuaWNhdGlvbiB3aGljaCBkb2VzIHdvcmsgd2VsbCBtb3N0IG9mIHRoZSB0aW1lcywgYnV0IGNvdWxkIHR1cm4gaW5lZmZpY2llbnQuIFNjb3R0LCBEaXJlY3RvciBvZiBDdXN0b21lciBBY3F1aXNpdGlvbiBhdCBJbnZpc2lvbiwgY292ZXJlZCB0aGlzIHBvaW50IGJlYXV0aWZ1bGx5IGluIG9uZSBvZiBoaXMgIgogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICJodHRwczovL3d3dy5saW5rZWRpbi5jb20vcHVsc2Uvc2xhY2stem9vbS1yZW1vdGUtc2hvdWxkZXItdGFwLXNjb3R0LWhhbmZvcmQvIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJMaW5rZWRJbiBhcnRpY2xlcyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiYmxvY2txdW90ZSIsIFsKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgJyIuLmluIGEgZnVsbHkgcmVtb3RlIGVudmlyb25tZW50IHNvbWUgaW50ZXJlc3RpbmcgY3VsdHVyYWwgZHluYW1pY3MgZXZvbHZlIHRoYXQgbWFrZSB0aGlzIHJlbW90ZSBzaG91bGRlciB0YXAgYSBiaXQgbW9yZSBjb21wbGV4LiBQZW9wbGUgYXJlbuKAmXQgYXMga2VlbiB0byBhc2sgaW5kaXZpZHVhbHMgdG8ganVtcCBvbiBhIGNhbGwgYXMgcXVpY2tseSDigJMgaXQgaXMgcXVpdGUgaW50ZXJlc3RpbmcuIE5vdywgdGhpcyBpc25cJ3Qgc2NpZW5jZS4uLnRoaXMgaXMganVzdCBteSBvYnNlcnZhdGlvbi4uLi4uLmFuZCBzb21ldGltZXMgeW91IGFsbCB3b3VsZCBoYXZlIGJlZW4gYmV0dGVyIG9mZiBqdXN0IGp1bXBpbmcgb24gYSBxdWljayBab29tLiInCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIi0gU2NvdHQgSGFuZm9yZCwgRGlyZWN0b3Igb2YgQ3VzdG9tZXIgQWNxdWlzaXRpb24gYXQgSW52aXNpb24iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzItZG9jdW1lbnRhdGlvbiIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzItZG9jdW1lbnRhdGlvbiIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDIuIERvY3VtZW50YXRpb24iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJJbiBhbiBvcmdhbmlzYXRpb24sIHdoZW4geW91IGFyZSB1bnN1cmUgaG93IGEgcGFydGljdWxhciBpc3N1ZSBuZWVkcyB0byBiZSB0YWNrbGVkIG9yIHRoZSBkZXRhaWxzIG9mIGEgY2VydGFpbiBwcm9jZXNzLCB5b3UgbmF0dXJhbGx5IGp1c3QgdHVybiBhcm91bmQgYW5kIGFzayB5b3VyIGNvbGxlYWd1ZXMuIFRoaXMgaXMgdGhlIGx1eHVyeSB0aGF0IGluZGl2aWR1YWxzIGhhdmUgaW4gYSBjby1sb2NhdGVkIHNldHRpbmcuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSG93ZXZlciwgd2hhdCBkbyB5b3UgZG8gaWYgeW91IGhhdmUgYSBkaXN0cmlidXRlZCB0ZWFtPyBZb3VyIGNvLXdvcmtlcnMgYXJlIG5vdCBhcm91bmQgeW91IGFuZCB3YWl0aW5nIGZvciB0aGVpciBhbnN3ZXIgaXMgcHJldHR5IGluZWZmaWNpZW50LiBEb2N1bWVudGF0aW9uIGNvbWVzIHRvIHRoZSByZXNjdWUgZm9yIGEgZGl2ZXJzZSBzZXQgb2Ygc3VjaCBzaXR1YXRpb25zIC0gdGhlIG1vcmUgZGV0YWlsZWQsIHRoZSBiZXR0ZXIuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiRm9yIGV4YW1wbGUsIEdpdGxhYidzIGhhbmRib29rIGlzIGEgc3RhZ2dlcmluZyAzMDAwIHBhZ2VzLCBhbmQgaGFzIGJlZW4gY29sbGFib3JhdGl2ZWx5IGJ1aWx0IGJ5IG9uZSBhbmQgYWxsIGF0IHRoZSBjb21wYW55IGZyb20gaXRzIHZlcnkgYmVnaW5uaW5nLiBUaGlzIGhhcyBlbnN1cmVkIHRoYXQgbGVhcm5pbmdzIGZyb20gaXRzIGluY2VwdGlvbiBoYXZlbuKAmXQgYmVlbiBsb3N0IGFuZCB0aGF0IGFsbW9zdCBhbGwgYW5zd2VycyBjYW4gYmUgZm91bmQgYnkgcmVseWluZyBvbiB0aGUgaGFuZGJvb2ssIHdoaWxlIGFsc28gcHJvbW90aW5nIG9uZSBvZiB0aGVpciBjb3JlIHZhbHVlcyBvZiB0cmFuc3BhcmVuY3kuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVG8ganVzdCBzaG93Y2FzZSwgdGhlIHZhcmllZCBuYXR1cmUgb2YgdG9waWNzIGNvdmVyZWQsIGhlcmUgYXJlIGEgY291cGxlIGV4Y2VycHRzIGZyb20gdGhlIGVtcGxveWVlIGhhbmRib29rOiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImJsb2NrcXVvdGUiLCBbCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICciSGF2aW5nIHBldHMsIGNoaWxkcmVuLCBzaWduaWZpY2FudCBvdGhlcnMsIGZyaWVuZHMgYW5kIGZhbWlseSB2aXNpYmxlIGR1cmluZyB2aWRlbyBjaGF0cyBpcyBlbmNvdXJhZ2VkLiBJZiB0aGV5IGFyZSBodW1hbiwgYXNrIHRoZW0gdG8gd2F2ZSBhdCB5b3VyIHJlbW90ZSB0ZWFtIG1lbWJlciB0byBzYXkg4oCYSGku4oCZJwogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJwIiwgW19jKCJzdHJvbmciLCBbX3ZtLl92KCItIEdpdGxhYiBIYW5kYm9vayAoRXhjZXJwdCAxKSIpXSldKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJibG9ja3F1b3RlIiwgWwogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAnIk9uZSBvZiB0aGUgd29yc3QgdGhpbmdzIGFyZSBhcHByb3ZhbCBwcm9jZXNzZXMuIFdlIHNob3VsZCBrZWVwIGFwcHJvdmFsIHByb2Nlc3NlcyB0byBhIG1pbmltdW0uIEJvdGggYnkgZ2l2aW5nIHBlb3BsZSB0aGUgYXV0aG9yaXR5IHRvIGRlY2lkZSBieSB0aGVtc2VsdmVzIGFuZCBieSBoYXZpbmcgYSBxdWljayBsaWdodHdlaWdodCBhcHByb3ZhbCBwcm9jZXNzIHdoZXJlIG5lZWRlZC7igJ0nCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInAiLCBbX2MoInN0cm9uZyIsIFtfdm0uX3YoIi0gR2l0bGFiIEhhbmRib29rIChFeGNlcnB0IDIpIildKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkFzIHdlIGNhbiBzZWUsIG5vdCBqdXN0IGNvbW1vbiB0b3BpY3Mgc3VjaCBhcyBPbmJvYXJkaW5nIG9yIEFwcHJhaXNhbHMgaGF2ZSBiZWVuIGNvdmVyZWQuIFNpdHVhdGlvbnMgdGhhdCBhcmUgcGVjdWxpYXIgdG8gcmVtb3RlIHdvcmtpbmcgaGF2ZSBiZWVuIGNvdmVyZWQgYXMgd2VsbCBhcyBwYXJ0cyB0aGF0IGFyZSB1bmlxdWUgdG8gR2l0bGFiJ3MgY3VsdHVyZSwgc28gdGhhdCBhbnl0aW1lIGEgR2l0bGFiIGVtcGxveWVlIGlzIHVuc3VyZSBhYm91dCB3aGF0IHRoZXkgbmVlZCB0byBkbyBpbiBhIHBhcnRpY3VsYXIgc2l0dWF0aW9uLCB0aGV5IGNhbiBqdXN0IHJlc29ydCB0byB0aGUgaGFuZGJvb2sgLSB0aGUgc2luZ2xlIHNvdXJjZSBvZiB0cnV0aCEgV2hhdCdzIG1vcmUgLSBpZiBpdCBjYW7igJl0IGJlIGZvdW5kLCB0aGUgb251cyBpcyBvbiB0aGUgcGVyc29uIHRvIGZpbmQgdGhlIGFuc3dlciwgYW5kIHRvIHRoZW4gZG9jdW1lbnQgaXQgdGhlcmUsIHNvIHRoYXQgdGhlIG5leHQgcGVyc29uIGxvb2tpbmcgZm9yIHRoZSBzYW1lIGNhbiBmaW5kIGl0IGVhc2lseSEiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJJcyBkb2N1bWVudGF0aW9uIG9ubHkgZm9yIGEgaGFuZGJvb2s/IildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJOb3QgYXQgYWxsISBEb2N1bWVudGF0aW9uIGFuZCBhc3luYyBnbyBoYW5kLWluLWhhbmQuIEVhY2ggdGltZSB5b3UgY29tbXVuaWNhdGUgd2l0aCBhbm90aGVyIHBlcnNvbiwgd2hldGhlciBvdmVyIGNoYXQgb3IgdmlkZW8gY2FsbCwgaXQgaXMgaW1wb3J0YW50IHRvIGNvbmRlbnNlIHRoZSBuZWNlc3NhcnkgaW5mb3JtYXRpb24gYW5kIHRyYW5zZmVyIGl0IHRvIHRoZSByZWxldmFudCB0b29sIGZvciBpdCB0byBiZSBhdmFpbGFibGUgZm9yIGFsbCB0byBsb29rIHVwLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJPdmVyYWxsIGRvY3VtZW50YXRpb24gaGVscHMgaW46IildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIk1haW50YWluaW5nIHRyYW5zcGFyZW5jeSBhbmQgZWFzZSBvZiBhY2Nlc3MgdG8gaW5mb3JtYXRpb24iKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkltcHJvdmVzIHByb2R1Y3Rpdml0eSBieSByZWR1Y2luZyB0aGUgbmVlZCB0byByZWFjaCBvdXQgdG8gb3RoZXJzIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlJlZHVjZXMgY29uZnVzaW9uIGR1cmluZyBwcm9qZWN0IGV4ZWN1dGlvbiBieSBiZWluZyB0aGUgc2luZ2xlIHNvdXJjZSBvZiB0cnV0aCIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkhlbHBzIG5ldyBoaXJlcyBnZXQgb25ib2FyZGVkIGluIGFuIGVhc2llciBmYXNoaW9uIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJQcm92aWRlcyBlbXBsb3llZXMgYSB3YXkgdG8gaWRlbnRpZnkgd2l0aCB0aGUgY3VsdHVyZSBvZiB0aGUgY29tcGFueSwgZ2l2ZW4gdGhleSBkb24ndCBoYXZlIHRoZSBhZHZhbnRhZ2Ugb2YgYmVpbmcgYWJsZSB0byBnYWluIHRoYXQgY29udGV4dCB0aHJvdWdoIGV4dGVuc2l2ZSBpbnRlcmFjdGlvbnMiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIpLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImJsb2NrcXVvdGUiLCBbCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICLigJxUaGUgYmlnZ2VzdCB0aGluZyBpcyBkb2N1bWVudGF0aW9uLiBBbmQgcGVvcGxlIGxpa2UgbWUgY29taW5nIGluIGEgZmV3IHllYXJzIGludG8gdGhlIGNvbXBhbnkgaGF2ZSBhIGxvdCB0byBiZSBncmF0ZWZ1bCBmb3IgdG8gb3VyIGZvdW5kZXJzIHRvIHRoaW5rIGFib3V0IGRvY3VtZW50YXRpb24gd2hlbiB0aGUgY29tcGFueSB3YXMgb25seSAzIHRvIDUgcGVvcGxlLiBTbywgb3VyIGhhbmRib29rIGlzIDMwMDAgcGFnZXMgbG9uZyBhbmQgaXQgZG9jdW1lbnRzIGV2ZXJ5IHByb2Nlc3MgaW1hZ2luYWJsZSB3aXRoaW4gR2l0TGFiIGZyb250IHRvIGJhY2ssIGV2ZW4gY3VsdHVyYWwgcHJvY2Vzc2VzLiBFdmVyeXRoaW5nIGlzIGRvY3VtZW50ZWQuIEFuZCBzbywgZXZlbiBwZW9wbGUgY29taW5nIGluIG5vdyBjYW4gbG9vayBiYWNrIGF0IHdoYXQgd2FzIGRvY3VtZW50ZWQgYXQgdGhlIHZlcnkgYmVnaW5uaW5nIGFuZCBpdCBpcyB2ZXJ5IGVhc3kgdG8gZ2V0IG9uYm9hcmQgaW5zdGVhZCBvZiBnZXR0aW5nIGEgaGFuZCBtZSBkb3duIG9mIGEgaGFuZCBtZSBkb3duIG9mIGEgaGFuZCBtZSBkb3duLiIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICAgIF92bS5fdigiLSBEYXJyZW4gTXVycGgsIEFsbCBSZW1vdGUgQ3VsdHVyZSBDdXJhdG9yIGF0IEdpdGxhYiIpCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX2MoImVtIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIllvdSBjYW4gbGlzdGVuIHRvIHRoaXMgc3BlY2lmaWMgc2VjdGlvbiBoZXJlIG9uIHRoZSBwb2RjYXN0OiIKICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vc291bmRjbG91ZC5jb20vcmVtb3RlLXRvb2xzL3RoZS1yZW1vdGUtd29ya2luZy1zaG93LWRhcnJlbi1tdXJwaC1hbGwtcmVtb3RlLWN1bHR1cmUtY3VyYXRvci1hdC1naXRsYWIjdD0xMDozMCIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfYygiZW0iLCBbX3ZtLl92KCJMaW5rIildKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIl8zLW9uYm9hcmRpbmciIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI18zLW9uYm9hcmRpbmciIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDMuIE9uYm9hcmRpbmciKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJPbmUgb2YgdGhlIG1vc3QgZXhjaXRpbmcgYXMgd2VsbCBhcyBkaWZmaWN1bHQgb2YgdGltZXMgZm9yIGFueSBvZiB1cyBpcyB3aGVuIHdlIGpvaW4gYSBuZXcgY29tcGFueS4gVGhlcmUgYXJlIG51bWVyb3VzIGV4cGVjdGF0aW9ucyBhbmQgYXNwaXJhdGlvbnMsIGhvd2V2ZXIsIHRoZSBlbGVtZW50IG9mIHVuZmFtaWxpYXJpdHkgYXQgdGhlIHZlcnkgb3V0c2V0IGlzIGEgaHVnZSBtb3VudGFpbiB0byBjbGltYi4gVG8gb3ZlcmNvbWUgdGhlc2UgY2hhbGxlbmdlcywgdGhlcmUgYXJlIGZldyBpbml0aWF0aXZlcyB0aGF0IGhhdmUgd29ya2VkIGZvciBkaXN0cmlidXRlZCB0ZWFtcywgd2hpY2ggYXJlOiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjYS1wcmUtam9pbmluZy1vbmJvYXJkaW5nIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiQSkgUHJlLWpvaW5pbmcgb25ib2FyZGluZyIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNiLWludHJvZHVjdGlvbnMtd2l0aC10aGUtd2lkZXItdGVhbSIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIkIpIEludHJvZHVjdGlvbnMgd2l0aCB0aGUgd2lkZXIgdGVhbSIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNjLWFzc2lnbmluZy1hLW1lbnRvciIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIkMpIEFzc2lnbmluZyBhIG1lbnRvciIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNkLXJlZ3VsYXItY2hlY2staW5zIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiRCkgUmVndWxhciBjaGVjay1pbnMiKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImEtcHJlLWpvaW5pbmctb25ib2FyZGluZyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjYS1wcmUtam9pbmluZy1vbmJvYXJkaW5nIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQSkgUHJlLWpvaW5pbmcgb25ib2FyZGluZyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkJlZm9yZSBhbiBpbmRpdmlkdWFsIGFjdHVhbGx5IGpvaW5zIHRoZSB0ZWFtLCBpdCBpcyBwcmV0dHkgaGVscGZ1bCBmb3IgdGhlbSB0byBrbm93IG1vcmUgYWJvdXQ6IgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVGhlIGNvbXBhbnkncyBjdWx0dXJlIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIkEgYnJvYWQgcGxhbiBmb3IgdGhlIGZpcnN0IGZldyB3ZWVrcyBhZnRlciBqb2luaW5nIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJDb21wYW55J3MgZG9jdW1lbnRhdGlvbiIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlc2UgYml0cyBvZiBpbmZvcm1hdGlvbiB3b3JrIGluIGJvdGggYSBjby1sb2NhdGVkIGFuZCBhIHJlbW90ZSBzY2VuYXJpby4gSG93ZXZlciwgaW4gdGhlIGxhdHRlciwgc2luY2UgdGhlcmUgaXMgYSBkaXNhZHZhbnRhZ2Ugb2Ygbm90IGhhdmluZyBjb2xsZWFndWVzIGFyb3VuZCB5b3UsIHRoaXMgYmVjb21lcyB0aGF0IG11Y2ggbW9yZSBjcml0aWNhbC4gSXQgYWxsb3dzIHRoZSBuZXcgaGlyZSB0byBiZSBtb3JlIGluZm9ybWVkIGFuZCBwcmVwYXJlZCBtZW50YWxseSBhYm91dCB3aGF0IHRoZXkgY2FuIGV4cGVjdC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJiLWludHJvZHVjdGlvbnMtd2l0aC10aGUtd2lkZXItdGVhbSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjYi1pbnRyb2R1Y3Rpb25zLXdpdGgtdGhlLXdpZGVyLXRlYW0iIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBCKSBJbnRyb2R1Y3Rpb25zIHdpdGggdGhlIHdpZGVyIHRlYW0iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJPbmUgb2YgdGhlIGltbWVkaWF0ZSBhbmQgbW9zdCBvYnZpb3VzIHN0ZXBzIGFmdGVyIGpvaW5pbmcgdGhlIHRlYW0gaXMgdG8gaW50cm9kdWNlIHRoZSBuZXcgaGlyZSB0byB0aGUgcmVzdCBvZiB0aGUgdGVhbS4gSW4gYW4gaW4tb2ZmaWNlIHNldHRpbmcsIGluZGl2aWR1YWxzIGNhbiBidW1wIGludG8gb25lLWFub3RoZXIsIGhvd2V2ZXIgd2hpbGUgd29ya2luZyByZW1vdGVseSBpdCBpcyBpbXBvcnRhbnQgdG8gYmUgaW50ZW50aW9uYWwgYWJvdXQgdGhpcy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGlzIGNvdWxkIHN0YXJ0IHdpdGggYW55b25lIGluIHRoZSB0ZWFtIGdpdmluZyBhIHNtYWxsIGludHJvZHVjdGlvbiBvZiB0aGUgcGVyc29uIGFuZCB3ZWxjb21pbmcgdGhlbSwgZm9sbG93ZWQgYnkgb3RoZXJzIGdpdmluZyB0aGVtIGEgd2FybSB3ZWxjb21lIHRvbyEgT3RoZXIgdGhhbiBtZXNzYWdlcyBvbiBhIHB1YmxpYyBjaGFubmVsLCBwZXJzb25hbGx5IG1lc3NhZ2luZyB0aGUgaW5kaXZpZHVhbCB3b3VsZCBtYWtlIHRoZW0gZmVlbCBtb3JlIHNwZWNpYWwgYW5kIHdlbGNvbWUuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiYmxvY2txdW90ZSIsIFsKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgJyJPbiBzb21lb25l4oCZcyBmaXJzdCBkYXkgdGhleSBnZXQgc2V0IHVwIG9uIGFsbCBvdXIgdG9vbHMsIHN5bmMgdXAgd2l0aCB0aGVpciBsZWFkIGFuZCBrZXkgcG9pbnRzIG9mIGNvbnRhY3QsIGVuam95IGEgcm9idXN0IHdlbGNvbWUgR0lGIHBhcnR5LCBhbmQgcmVhZCB0aHJvdWdoIHNvbWUga2V5IGRvY3MgYWJvdXQgb3VyIHZpc2lvbiwgbWlzc2lvbiwgYW5kIHZhbHVlcy4nCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgICBfdm0uX3YoIi0gQ291cnRuZXkgU2VpdGVyLCBEaXJlY3RvciBvZiBQZW9wbGUgYXQgQnVmZmVyIikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiYy1hc3NpZ25pbmctYS1tZW50b3IiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2MtYXNzaWduaW5nLWEtbWVudG9yIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQykgQXNzaWduaW5nIGEgbWVudG9yIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSW4gdGhlIGVhcmx5IGRheXMgb2Ygam9pbmluZywgaXQgaXMgdXN1YWxseSBuaWNlIHRvIGhhdmUgc29tZW9uZSB5b3UgY2FuIHJlYWNoIG91dCB0byBmb3IgYW55IGhlbHAgdGhhdCB5b3UgbmVlZC4gRG9pc3QgdGFja2xlcyB0aGlzIGJ5IHBhaXJpbmcgZWFjaCBwZXJzb24gd2l0aCBhIG1lbnRvci4gVGhleSBoYXZlIGZvdW5kIHRoYXQgdGhlc2UgcmVsYXRpb25zaGlwcyBzaG91bGQgbGFzdCBiZXR3ZWVuIHRocmVlIHRvIHNpeCBtb250aHMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAnVGFraW5nIHRoZSBtZW50b3JzaGlwIHByb2Nlc3MgYSBzdGVwIGFoZWFkLCB0aGUgdGVhbSBhcnJhbmdlcyBmb3IgYSAiTWVudG9yIFRyaXAiLCB3aGVyZSB0aGUgbmV3IGhpcmUgdHJhdmVscyB0byBtZWV0IHRoZWlyIG1lbnRvciBhbmQgdG8gd29yayB3aXRoIHRoZW0gaW4tcGVyc29uIGZvciBhIHdlZWsuIFRoaXMgaGVscHMgaW4gY3JlYXRpbmcgYSBzdHJvbmcgYm9uZCBiZXR3ZWVuIHRoZSB0d28gYW5kIGFsc28gc3BlZWRzIHRoZSBwcm9jZXNzIG9mIG9uYm9hcmRpbmcuJwogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiYmxvY2txdW90ZSIsIFsKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgJyJNZW50b3JpbmcgaXMgY3JpdGljYWwuIFdvcmtpbmcgcmVtb3RlbHkgY2FuIGJlIGlzb2xhdGluZywgYW5kIGFza2luZyBxdWVzdGlvbnMgY2FuIGJlIGludGltaWRhdGluZy4gVG8gY291bnRlciB0aGlzLCBpdOKAmXMgaW1wb3J0YW50IHRvIG1ha2UgbWVudG9yc2hpcCBhbmQgZmVlZGJhY2sgbG9vcHMgYXMgZXhwbGljaXQgYXMgcG9zc2libGUuIENvbnZlcnNlbHksIHlvdSBtaWdodCBub3QgbmVlZCBhbiBleHBsaWNpdCBtZW50b3IgaW4gYSB0eXBpY2FsIG9mZmljZSBzZXR0aW5nLiBZb3XigJlyZSBzaXR0aW5nIHNpdHRpbmcgc2lkZSBieSBzaWRlIHdpdGggeW91ciBwZWVycyBhbGwgZGF5LCBldmVyeSBkYXkuIE1lbnRvcnNoaXAgaXMgaW1wbGllZCwgZXZlbiBpZiB1bmRlZmluZWQsIHRocm91Z2hvdXQgdGhlIG51bWVyb3VzIGZhY2UtdG8tZmFjZSBpbnRlcmFjdGlvbiBkYXkgaW4gYW5kIGRheSBvdXQuIFRoaXMgZGlmZmVyZW5jZSBtYWtlcyBpdCBldmVuIG1vcmUgaW1wb3J0YW50IHRoYXQgdGhpcyBjaGFsbGVuZ2UgaXMgYWNrbm93bGVkZ2VkIGFuZCBwcm9hY3RpdmVseSB3b3JrZWQgb24uJwogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJwIiwgW19jKCJzdHJvbmciLCBbX3ZtLl92KCItIEdvbsOnYWxvIFNpbHZhLCBDVE8gb2YgRG9pc3QiKV0pXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAnSW4gYSBjb252ZXJzYXRpb24gd2l0aCB1cywgQnJpZSwgQ2FyZWVyIERldmVsb3BtZW50IE1hbmFnZXIgYXQgRmxleEpvYnMsIG1lbnRpb25lZCBob3cgdGhleSBoYXZlIGEgc2ltaWxhciBjb25jZXB0IG9mIHNldHRpbmcgbmV3IGhpcmVzIHVwIHdpdGggYSAiVGVhbSBCdWRkeSIuIFRoZSAiVGVhbSBCdWRkeSIgaXMgdXN1YWxseSBhIHBlcnNvbiBmcm9tIGEgZGlmZmVyZW50IHRlYW0uIFRoaXMgYWxsb3dzIG5ldyBoaXJlcyB0byBhY3F1YWludCB0aGVtc2VsdmVzIHdpdGggcGVvcGxlIGZyb20gb3RoZXIgcGFydHMgb2YgdGhlIGNvbXBhbnkgdG9vLCBlbnN1cmluZyB0aGF0IHRoZXkgZG9uXCd0IGp1c3QgaW50ZXJhY3Qgd2l0aCB0aGUgc2FtZSBzZXQgb2YgcGVvcGxlIGV2ZXJ5ZGF5LicKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkl0IGlzIGNsZWFyIHRoYXQgdGVhbXMgYXJlIHN0aWxsIGZpZ3VyaW5nIG91dCBuZXcgd2F5cyBvZiBpbXBsZW1lbnRpbmcgdGhlIG1lbnRvcnNoaXAgY29uY2VwdC4gVGhlc2UgYXJlIHNvbWUgaWRlYXMgdGhhdCB5b3UgY2FuIGJvcnJvdyBhbmQgYWRhcHQgdG8gdGhlIG5lZWRzIG9mIHlvdXIgdGVhbS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJkLXJlZ3VsYXItY2hlY2staW5zIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNkLXJlZ3VsYXItY2hlY2staW5zIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgRCkgUmVndWxhciBjaGVjay1pbnMiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgb25ib2FyZGluZyBvZiBhIHBlcnNvbiBpc24ndCBjb21wbGV0ZSBvbiB0aGUgZmlyc3QgZGF5IG9yIHRoZSBmaXJzdCBmZXcgd2Vla3MsIGl0IHRha2VzIGEgZmV3IG1vbnRocy4gVGhlcmVmb3JlLCByZWd1bGFyIGNoZWNrLWlucyBoZWxwIGluIGVuc3VyaW5nIHRoYXQgYWxsIGlzIHdlbGwgd2l0aCB0aGVtIGJvdGggcHJvZmVzc2lvbmFsbHkgYW5kIHBlcnNvbmFsbHkuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiRm9yIG1hbnksIHRoaXMgbWlnaHQgYmUgdGhlaXIgZmlyc3QgZXhwZXJpZW5jZSB3b3JraW5nIHJlbW90ZWx5IHRvby4gVGhpcyBtaWdodCBsZWFkIHRvIGEgZmVlbGluZyBvZiBsb25lbGluZXNzIGFuZCBpc29sYXRpb24uIENvbnZlcnNhdGlvbnMgd2l0aCBzdWNoIGluZGl2aWR1YWxzIG1pZ2h0IGFkZHJlc3MgdGhpcyBmZWVsaW5nIGFuZCBhbHNvIHJlYXNzdXJlcyB0aGVtIHRoYXQgdGhleSBjYW4gcmVhY2ggb3V0IHRvIHlvdSB3aGVuZXZlciBuZWNlc3NhcnkuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzQtY3VsdHVyZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjXzQtY3VsdHVyZSIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgNC4gQ3VsdHVyZSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkZvciBhbnlvbmUgdG8gY29udHJpYnV0ZSB0byB5b3VyIGNvbXBhbnkgYXQgdGhlaXIgYmVzdCBjYXBhY2l0eSBhbmQgbW9yZSBpbXBvcnRhbnRseSB0byB3b3JrIGluIHVuaXNvbiB3aXRoIHRoZSByZXN0IG9mIHRoZSB0ZWFtLCBpdCBpcyBpbXBvcnRhbnQgdGhhdCB0aGV5IGJlbGlldmUgaW4gdGhlIGNvbXBhbnkgJiBpdHMgdmFsdWVzIHdoaWxlIGFsc28gYmVpbmcgYWJsZSB0byBpZGVudGlmeSB3aXRoIHRoZSBjb21wYW55J3MgY3VsdHVyZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJTaW5jZSwgdGhpcyBpcyBhbiBpbXBvcnRhbnQgcGFydCBpbiBpdHNlbGYsIHdlIHdpbGwgY292ZXIgdGhlIHRvcGljIG9mIGJ1aWxkaW5nIGEgY3VsdHVyZSBpbiBhIHJlbW90ZSB0ZWFtIGluIGEgc2VwYXJhdGUgc2VjdGlvbi4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJiciIpLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImNlbnRlciIsIFsKICAgICAgICBfYygiYiIsIFtfdm0uX3YoIlBBUlRORVJTIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygiaHIiKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgYXR0cnM6IHsgaHJlZjogImh0dHBzOi8vd3d3LmZsZXhpcGxlLmNvbSIsIHRhcmdldDogIl9ibGFuayIgfSB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicGFydG5lci1sb2dvIiwKICAgICAgICAgICAgICBhdHRyczogeyBzcmM6ICIvYXNzZXRzL2ZsZXhpcGxlLWxvZ28tbW9ub2dyYW0uanBnIiwgd2lkdGg6ICI4MC8iIH0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0KICAgICAgICApLAogICAgICAgIF92bS5fdigiXG7igIPigIPigINcbiIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBhdHRyczogeyBocmVmOiAiaHR0cHM6Ly93ZXdvcmtyZW1vdGVseS5jb20iLCB0YXJnZXQ6ICJfYmxhbmsiIH0gfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInBhcnRuZXItbG9nbyIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiAiL2Fzc2V0cy9XV1IucG5nIiwgd2lkdGg6ICI4MC8iIH0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0KICAgICAgICApLAogICAgICAgIF92bS5fdigiXG7igIPigIPigINcbiIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBhdHRyczogeyBocmVmOiAiaHR0cHM6Ly9ydW5uaW5ncmVtb3RlLmNvbSIsIHRhcmdldDogIl9ibGFuayIgfSB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicGFydG5lci1sb2dvIiwKICAgICAgICAgICAgICBhdHRyczogeyBzcmM6ICIvYXNzZXRzL3J1bm5pbmctcmVtb3RlLmpwZyIsIHdpZHRoOiAiODAvIiB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICBdCiAgICAgICAgKQogICAgICBdKQogICAgXSwKICAgIDEKICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}