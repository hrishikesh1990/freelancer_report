{"remainingRequest":"/Users/Macbook/Documents/projects/FreelancerReport2020/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/Macbook/Documents/projects/FreelancerReport2020/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/Macbook/Documents/projects/FreelancerReport2020/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/Macbook/Documents/projects/FreelancerReport2020/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/Macbook/Documents/projects/FreelancerReport2020/docs/3d-remote-first-or-remote-friendly.md?vue&type=template&id=f3d93602&","dependencies":[{"path":"/Users/Macbook/Documents/projects/FreelancerReport2020/docs/3d-remote-first-or-remote-friendly.md","mtime":1582710956429},{"path":"/Users/Macbook/Documents/projects/FreelancerReport2020/node_modules/cache-loader/dist/cjs.js","mtime":1576060144534},{"path":"/Users/Macbook/Documents/projects/FreelancerReport2020/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1576060144779},{"path":"/Users/Macbook/Documents/projects/FreelancerReport2020/node_modules/cache-loader/dist/cjs.js","mtime":1576060144534},{"path":"/Users/Macbook/Documents/projects/FreelancerReport2020/node_modules/vue-loader/lib/index.js","mtime":1576060144779},{"path":"/Users/Macbook/Documents/projects/FreelancerReport2020/node_modules/@vuepress/markdown-loader/index.js","mtime":1582710536446}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7IGF0dHJzOiB7IHNyYzogIi9hc3NldHMvYmVpbmdfcmVtb3RlX2ZpcnN0LnBuZyIsIGFsdDogIiIgfSB9KQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJiZWluZy1yZW1vdGUtZmlyc3QiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2JlaW5nLXJlbW90ZS1maXJzdCIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEJlaW5nIHJlbW90ZS1maXJzdCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIldoZW4gSSB3YXMgZmlyc3QgaW50cm9kdWNlZCB0byB0aGUgY29uY2VwdCBvZiByZW1vdGUgd29ya2luZywgSSBuZXZlciB0cnVseSBhcHByZWNpYXRlZCB0aGUgdmFyaW91cyBsZXZlbHMgb2YgcmVtb3RlIHRoYXQgYSBjb21wYW55IGNvdWxkIGFkb3B0LiBCZWxvdyBpcyBhIGdyYXBoaWMgY3JlYXRlZCBieSBCdWZmZXIgdGhhdCB0cmllcyB0byBjYXRlZ29yaXNlIHRoZSB3YXkgYSBjb21wYW55IGNvdWxkIGFwcHJvYWNoIHJlbW90ZSB3b3JraW5nLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAiaHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3NsaXRlLWFwaS1maWxlcy1wcm9kdWN0aW9uL2ZpbGVzL2FlZWFmOGI4LTdlYzYtNDE5ZC1hNjA4LWMzNjg2YmEwYTg5MC9pbWFnZS5wbmciLAogICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiU28sIHdlIGNhbiBzZWUgdGhhdCBpdCBpcyBub3QgcmVhbGx5IGEgMCB0byAxIHN3aXRjaC4gVGhlcmUgYXJlIG1hbnkgaW50ZXJtZWRpYXRlIGxldmVscyB0aGF0IGNvdWxkIGFsc28gYmUgaW1wbGVtZW50ZWQuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQXQgdGhlIGNvcmUgb2YgdGhpcyBncmFwaGljIGlzIHRoZSBtZW50YWxpdHkgYmVoaW5kIG9wdGluZyBmb3IgZW1wbG95ZWVzIHRvIHdvcmsgcmVtb3RlbHkuIElzIGl0IGJlaW5nIGFwcHJvYWNoZWQgYXMgYSBwZXJrLCBhbiBlbmFibGVyIG9yIGEgd2F5IG9mIGxpZmU/IFRoZSB1bmRlcmx5aW5nIG1vdGl2ZSBkb2VzIG1hdHRlciwgYXMgaXQgaGFzIGEgcnViLW9mZiBlZmZlY3Qgb24gdGhlIHdvcmtpbmcgZW52aXJvbm1lbnQgYW5kIGdlbmVyYWwgdGVhbSBjdWx0dXJlLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIndoYXQtaXMtdGhlLWRpZmZlcmVuY2UiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3doYXQtaXMtdGhlLWRpZmZlcmVuY2UiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBXaGF0IGlzIHRoZSBkaWZmZXJlbmNlPyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJ0ZvciBlYXNlIG9mIGNvbXBhcmlzb24sIHRoaXMgdW5kZXJseWluZyBtb3RpdmF0aW9uIGNhbiBiZSBjYXRlZ29yaXNlZCBhcyBiZWluZyBlaXRoZXIgcmVtb3RlLWZyaWVuZGx5IE9SIHJlbW90ZS1maXJzdC4gVGhlIGJhc2ljIGRpZmZlcmVuY2UgaXMgdGhhdCBpbiB0aGUgZm9ybWVyIHdlIHdvdWxkIGNob29zZSB0byAiYWxsb3ciIGVtcGxveWVlcyB0byB3b3JrIHJlbW90ZWx5IHJhdGhlciB0aGFuICJlbXBvd2VyaW5nIiB0aGVtIHRvIGRvIHNvLCBhcyBpbiB0aGUgbGF0dGVyLiBCZWluZyByZW1vdGUtZnJpZW5kbHkgcmVzdWx0cyBpbiByZW1vdGUgdGVhbSBtZW1iZXJzIGZhbGxpbmcgdG8gdGhlIGJvdHRvbSDwn5iuLicKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlNpbmNlLCBpdCBtaWdodCBub3QgYmUgZW50aXJlbHkgY2xlYXIgd2h5IHRoaXMgd291bGQgaGFwcGVuLCBsZXQncyB0cnkgdG8gbG9vayBhdCB0aGlzIHRocm91Z2ggYW4gZXhhbXBsZSBvZiBhIHJlbW90ZS1mcmllbmRseSBjdWx0dXJlOiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkNvbnNpZGVyIHlvdXIgd2Vla2x5IG9yIG1vbnRobHkgaW4tb2ZmaWNlIHRlYW0gbWVldGluZ3Mgd2l0aCByZW1vdGUgdGVhbSBtZW1iZXJzIGpvaW5pbmcgaW4gb24gY2FsbC4gSXQgaXMgdmVyeSBsaWtlbHkgdGhhdCBzaWRlIGNvbnZlcnNhdGlvbnMgc3ByaW5nIHVwIG5hdHVyYWxseSwgd2l0aCBkaWFsZWQtaW4gbWVtYmVycyBsb3NpbmcgbG90IG9mIGNvbnRleHQgYW5kIHVsdGltYXRlbHkgZ2V0dGluZyBtYXJnaW5hbGlzZWQgaW4gdGhlIGNvbnZlcnNhdGlvbnMuIEhhdmVuJ3Qgd2UgYWxsIGV4cGVyaWVuY2VkIHRoaXMgYXQgc29tZSBwb2ludD8iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGlzIGNvbnRleHQgZW5hYmxlcyB1cyB0byBwdXQgRXJpYyBZdWFuJ3MgKFpvb20ncyBDRU8pIGZvbGxvd2luZyBjb21tZW50IGluIHBlcnNwZWN0aXZlLCBhcyBpdCBpcyBub3QgYSBzaW1wbGUgZGVjaXNpb24gdG8ganVzdCBcImFsbG93XCIgaGlzIHRlYW0gdG8gc3RhcnQgd29ya2luZyByZW1vdGVseSBmcm9tIHRvbW9ycm93LiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgIkNsaWVudE9ubHkiLAogICAgICAgIFsKICAgICAgICAgIF9jKCJUd2VldCIsIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBpZDogIjExOTI1MDkxOTY3NDAwODc4MDkiLAogICAgICAgICAgICAgIG9wdGlvbnM6IHsgY29udmVyc2F0aW9uOiAibm9uZSIgfQogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImgyIiwKICAgICAgICB7IGF0dHJzOiB7IGlkOiAiaG93LWRvLXdlLWJ1aWxkLWEtdHJ1bHktcmVtb3RlLWZpcnN0LWN1bHR1cmUiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2hvdy1kby13ZS1idWlsZC1hLXRydWx5LXJlbW90ZS1maXJzdC1jdWx0dXJlIiB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBIb3cgZG8gd2UgYnVpbGQgYSB0cnVseSByZW1vdGUtZmlyc3QgY3VsdHVyZT8iKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJCdWlsZGluZyBhIHJlbW90ZS1maXJzdCBjdWx0dXJlLCBhcyB0aGUgbmFtZSBzdWdnZXN0cywgaW52b2x2ZXMgZGVzaWduaW5nIHByb2Nlc3NlcyB0aGF0IGFyZSBmaXJzdCBpbmNsdXNpdmUgb2YgcmVtb3RlIGVtcGxveWVlcywgcmF0aGVyIHRoYW4gdGhhdCBiZWluZyBhbiBhZnRlcnRob3VnaHQuIEhlcmUgYXJlIHNvbWUgcG9pbnRzIHRvIHNldCB0aGUgcmlnaHQgdG9uZToiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJvbCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQmUgaW50ZW50aW9uYWwiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiOiBBY2NvcmRpbmcgdG8gRGFycmVuLCBBbGwgUmVtb3RlIEN1bHR1cmUgQ3VyYXRvciBhdCBHaXRsYWIsIHRoZSBrZXkgZm9yIGV2ZXJ5IGNvbXBhbnkgbG9va2luZyB0byBnbyByZW1vdGUgaXMgdG8gYmUgaGlnaGx5IGludGVudGlvbmFsIGFib3V0IGV2ZXJ5dGhpbmcuIEl0IGlzIHZlcnkgZWFzeSBmb3IgaW5kaXZpZHVhbHMgYW5kIGNvbXBhbmllcyB0byBkZWZhdWx0IHRvIHByb2Nlc3NlcyB0aGF0IHdvdWxkIHdvcmsgaW4gYSB0eXBpY2FsIGNvLWxvY2F0ZWQgc2V0dGluZywgd2hpY2ggY2FuIGJlIHZlcnkgZGFuZ2Vyb3VzLiBUaGVyZWZvcmUsIGEgY29uc2Npb3VzIGFuZCBpbnRlbnRpb25hbCBhcHByb2FjaCB0byBldmVyeWRheSB3b3JrIGlzIG5lZWRlZCB0byBtYWtlIHJlbW90ZSB3b3JrIHN1Y2Nlc3NmdWwuIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImVtIiwgWwogICAgICAgICAgX3ZtLl92KCJZb3UgY291bGQgbGlzdGVuIHRvIGhpbSBzaGFyZSB0aGlzIHNwZWNpZmljIGZlZWRiYWNrIGhlcmU6IikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgImh0dHBzOi8vc291bmRjbG91ZC5jb20vcmVtb3RlLXRvb2xzL3RoZS1yZW1vdGUtd29ya2luZy1zaG93LWRhcnJlbi1tdXJwaC1hbGwtcmVtb3RlLWN1bHR1cmUtY3VyYXRvci1hdC1naXRsYWIjdD0yMDoyMiIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiTGluayIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiYmxvY2txdW90ZSIsIFsKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIuKAnEZyb20gdGhlIGVtcGxveWVy4oCZcyBzdGFuZHBvaW50LCB0d28gdGhpbmdzIGNvbWUgdG8gbWluZC4gWW91IG5lZWQgdG8gYmUgZXh0cmVtZWx5IGludGVudGlvbmFsIGFib3V0IGluZm9ybWFsIGNvbW11bmljYXRpb24uIEFuZCB0aGlzIGlzIGEgYmlnIG9uZSBiZWNhdXNlIHdoZW4geW91IGFyZSBpbiBhIGNvLWxvY2F0ZWQgc2V0dGluZywgcGVvcGxlIHRlbmQgdG8gY3Jvc3MgcGF0aHMgc28gdGhleSBjYW4gbW9yZSBuYXR1cmFsbHkgZGV2ZWxvcCByZWxhdGlvbnNoaXBzIGluIGFuZCBvdXRzaWRlIG9mIHdvcmsgd2hpY2ggZ2VuZXJhbGx5IGhlbHBzIHRoZSBtb3JhbGUgb2YgdGhlIGNvbXBhbnkuIEluIGEgcmVtb3RlIHNldHRpbmcsIHlvdSBuZWVkIHRvIGJlIGludGVudGlvbmFsIGFib3V0IHRoaXMuIFNvIHlvdSBuZWVkIHRvIHdlYXZlIHRoaW5ncyBsaWtlIGNvZmZlZSBjaGF0cywgZ3JvdXAgc29jaWFsIGNhbGxzLCB0ZWFtIHNvY2lhbCBjYWxscywgY29tcGFueSBjYWxscy4gWW91IG5lZWQgdG8gd2VhdmUgdGhhdCBpbnRvIHRoZSBjdWx0dXJlIGFuZCBjYXJ2ZSBvdXQgdGltZSBjb21wYW55LXdpZGUgdG8gbWFrZSB0aGlzIGEgdGhpbmcu4oCdIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIi0gRGFycmVuIE11cnBoLCBIZWFkIG9mIFJlbW90ZSBhdCBHaXRsYWIiKV0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygib2wiLCB7IGF0dHJzOiB7IHN0YXJ0OiAiMiIgfSB9LCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkRlZmF1bHQgdG8gdmlkZW9jb25mZXJlbmNpbmcgZm9yIG1lZXRpbmdzIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIjogSnVzdGluZSBKb3JkYW4sIEhlYWQgb2YgTWFya2V0aW5nIGF0IEhlbHBTY291dCwgcHV0IGl0IGJlYXV0aWZ1bGx5IGluIGEgcmVwb3J0IHByZXBhcmVkIGJ5IFRyZWxsby4gU2hlIGVzc2VudGlhbGx5IHN1Z2dlc3RlZCB0aGF0IGlmIGV2ZW4gYSBzaW5nbGUgcGVyc29uIGlzIHJlbW90ZSBmb3IgYSBwYXJ0aWN1bGFyIG1lZXRpbmcsIHRoZW4gZXZlcnlvbmUgZWxzZSBhbHNvIG1vdmVzIHRvIGEgcmVtb3RlIGFwcHJvYWNoLiBUaGlzIGVuc3VyZXMgYSBsZXZlbCBwbGF5aW5nIGZpZWxkIGZvciBhbGwsIHdoZXJlIGlkZWFzIGFuZCBpbmZvcm1hdGlvbiBjYW4gYmUgY29uc3VtZWQgaW4gYW4gZXF1YWwgZmFzaGlvbi4iCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiYmxvY2txdW90ZSIsIFsKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgJyJVbmxlc3MgZXZlcnkgcGVyc29uIGlzIGluIHRoZSBzYW1lIHJvb20sIGFsbCBtZWV0aW5ncyBhcmUgaGVsZCBvdmVyIHZpZGVvIGNvbmZlcmVuY2UuIFdl4oCZdmUgYWxsIGJlZW4gdGhhdCBvbmUgcGVyc29uIGRpYWxpbmcgaW50byBhIGNhbGwgb25seSB0byBoZWFyIGEgcm9vbSBmdWxsIG9mIG5vaXNlLCBlY2hvLCBhbmQgc2lkZSBjb252ZXJzYXRpb25zIG9uIHRoZSBvdGhlciBlbmQuIEl04oCZcyBhIHRlcnJpYmxlIGV4cGVyaWVuY2UuIFNvIHdoZW4gb25lIHBlcnNvbiBpcyDigJxyZW1vdGXigJ0gZm9yIGEgbWVldGluZywgZXZlcnlvbmUgaXMuJwogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgICAgX3ZtLl92KCItIEp1c3RpbmUgSm9yZGFuLCBIZWFkIG9mIE1hcmtldGluZyBhdCBIZWxwU2NvdXQiKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJvbCIsIHsgYXR0cnM6IHsgc3RhcnQ6ICIzIiB9IH0sIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiVGVhbSBvZmZzaXRlIGJvbmRpbmciKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiOiBJdCBpcyBpbXBvcnRhbnQgZm9yIHJlbW90ZSB3b3JrZXJzIGFuZCBpbi1vZmZpY2UgZW1wbG95ZWVzIHRvIGdldCB0byBtZWV0IGVhY2ggb3RoZXIgb3V0c2lkZSB0aGUgZGlnaXRhbCBzZXR0aW5nLiBBcGFydCBmcm9tIGFjdHVhbGx5IGdldHRpbmcgdG8ga25vdyBwZW9wbGUncyBwZXJzb25hbGl0aWVzIGFuZCBmb3JtaW5nIHBlcnNvbmFsIGJvbmRzLCB0aGlzIGFsbG93cyBmb3IgdGhlbSB0byBhbHNvIGV4Y2hhbmdlIHBlcnNwZWN0aXZlcy4gVGhpcyBuYXR1cmFsbHkgaW1wcm92ZXMgcHJvZHVjdGl2aXR5IGFuZCBjb2xsYWJvcmF0aW9uIGFzIG5vdyBpbmRpdmlkdWFscyBjYW4gcmVsYXRlIHRvIHRoZSBwZW9wbGUgdGhleSBhcmUgd29ya2luZyB3aXRoIGF0IGEgbXVjaCBiZXR0ZXIgbGV2ZWwuIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImJsb2NrcXVvdGUiLCBbCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICciVGhlIFJldHJlYXRzIGFyZSBodWdlLiBJZiB3ZSBkaWRuXCd0IGRvIHRoYXQsIHdlIHdvdWxkIGhhdmUgbG9zdCBhIGxvdCBvZiBwZW9wbGUuIEJ1dCBiZWNhdXNlIHRoZXkgZ290IHRvIGtub3cgbWUsIG15IGNvLWZvdW5kZXIsIHRoZWlyIHRlYW1zLCB0aGUgbWFuYWdlcnMsIGRldmVsb3BlcnMsIGVhY2ggb3RoZXIgLSBpdCBicmluZ3Mgb3V0IGEgc2Vuc2Ugb2YgYmVsb25naW5nLiBJdCBpcyBvbmx5IGZvciBhIHdlZWssIGJ1dCBpdCBpcyByZWFsbHkgYmlnISInCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiLSBEYXZlIE5ldm9ndCwgQ28tZm91bmRlciAmIENFTyBvZiBIdWJzdGFmZiIpXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJiciIpLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImNlbnRlciIsIFsKICAgICAgICBfYygiYiIsIFtfdm0uX3YoIlBBUlRORVJTIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygiaHIiKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgYXR0cnM6IHsgaHJlZjogImh0dHBzOi8vd3d3LmZsZXhpcGxlLmNvbSIsIHRhcmdldDogIl9ibGFuayIgfSB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicGFydG5lci1sb2dvIiwKICAgICAgICAgICAgICBhdHRyczogeyBzcmM6ICIvYXNzZXRzL2ZsZXhpcGxlLWxvZ28tbW9ub2dyYW0uanBnIiwgd2lkdGg6ICI4MC8iIH0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0KICAgICAgICApLAogICAgICAgIF92bS5fdigiXG7igIPigIPigINcbiIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBhdHRyczogeyBocmVmOiAiaHR0cHM6Ly93ZXdvcmtyZW1vdGVseS5jb20iLCB0YXJnZXQ6ICJfYmxhbmsiIH0gfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInBhcnRuZXItbG9nbyIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiAiL2Fzc2V0cy9XV1IucG5nIiwgd2lkdGg6ICI4MC8iIH0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0KICAgICAgICApLAogICAgICAgIF92bS5fdigiXG7igIPigIPigINcbiIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBhdHRyczogeyBocmVmOiAiaHR0cHM6Ly9ydW5uaW5ncmVtb3RlLmNvbSIsIHRhcmdldDogIl9ibGFuayIgfSB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicGFydG5lci1sb2dvIiwKICAgICAgICAgICAgICBhdHRyczogeyBzcmM6ICIvYXNzZXRzL3J1bm5pbmctcmVtb3RlLmpwZyIsIHdpZHRoOiAiODAvIiB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICBdCiAgICAgICAgKQogICAgICBdKQogICAgXSwKICAgIDEKICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}