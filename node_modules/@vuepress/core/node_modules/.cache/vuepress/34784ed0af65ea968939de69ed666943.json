{"remainingRequest":"/Users/Macbook/Documents/projects/remotework2020_new/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/Macbook/Documents/projects/remotework2020_new/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/Macbook/Documents/projects/remotework2020_new/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/Macbook/Documents/projects/remotework2020_new/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/Macbook/Documents/projects/remotework2020_new/docs/5-the-remote-working-chronicles.md?vue&type=template&id=6a1647d8&","dependencies":[{"path":"/Users/Macbook/Documents/projects/remotework2020_new/docs/5-the-remote-working-chronicles.md","mtime":1580717550793},{"path":"/Users/Macbook/Documents/projects/remotework2020_new/node_modules/cache-loader/dist/cjs.js","mtime":1576060144534},{"path":"/Users/Macbook/Documents/projects/remotework2020_new/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1576060144779},{"path":"/Users/Macbook/Documents/projects/remotework2020_new/node_modules/cache-loader/dist/cjs.js","mtime":1576060144534},{"path":"/Users/Macbook/Documents/projects/remotework2020_new/node_modules/vue-loader/lib/index.js","mtime":1576060144779},{"path":"/Users/Macbook/Documents/projects/remotework2020_new/node_modules/@vuepress/markdown-loader/index.js","mtime":1576060144870}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogeyBzcmM6ICIvYXNzZXRzL3RoZV9yZW1vdGVfd29ya2luZ19jaHJvbmljbGVzLnBuZyIsIGFsdDogIiIgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImNlbnRlciIsIFtfYygiaDEiLCBbX3ZtLl92KCJUaGUgUmVtb3RlIFdvcmtpbmcgQ2hyb25pY2xlcyIpXSldKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoMiIsCiAgICAgICAgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgaWQ6ICJfMS1hYm91dC1jb29raW5nLXBhc3RhLXdyaXRpbmctamF2YXNjcmlwdC1hbmQtd29ya2luZy1yZW1vdGVseSIKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAiI18xLWFib3V0LWNvb2tpbmctcGFzdGEtd3JpdGluZy1qYXZhc2NyaXB0LWFuZC13b3JraW5nLXJlbW90ZWx5IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiAjMTogQWJvdXQgY29va2luZyBwYXN0YSwgd3JpdGluZyBKYXZhU2NyaXB0IGFuZCB3b3JraW5nIHJlbW90ZWx5IgogICAgICAgICAgKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJGcmFuY2VzY28gZGVjaWRlZCB0byBwdXJzdWUgYSByZW1vdGUgY2FyZWVyIHdoaWxlIGluIENvbGxlZ2UgaXRzZWxmLiBQYXNzaW9uYXRlIGFib3V0IGNvb2tpbmcgKGV2ZXJ5dGhpbmcgbWVkaXRlcnJhbmVhbiksIGhlIGZlbGwgaW4gbG92ZSB3aXRoIFNpY2lseSwgd2hlbiBoZSB3ZW50IHRoZXJlIG9uIGEgc3VtbWVyIGJyZWFrLCBnaXZlbiB0aGUgYWNjZXNzIHRvIGZyZXNoIGluZ3JlZGllbnRzIGZvciBjb29raW5nIGFuZCB0aGUgZ29yZ2VvdXMgbmF0dXJhbCBsYW5kc2NhcGUuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiU2ljaWx5IHdhc24ndCBpZGVhbCBnaXZlbiBoZSBkaWRuJ3QgZXZlbiBoYXZlIGludGVybmV0IGFjY2Vzcywgc28gaGUgbW92ZWQgdG8gVmFsZW5jaWEsIFNwYWluIGFuZCBoYXMgYmVlbiBpbiBsb3ZlIHdpdGggdGhlIGNpdHkgZXZlciBzaW5jZS4gRnJhbmNlc2NvIHN0cm9uZ2x5IGJlbGlldmVzIHRoYXQgdG8gYmUgc3VjY2Vzc2Z1bCBhdCByZW1vdGUgd29yaywgeW91IG5lZWQgdG8gaGF2ZSB0aGUgcmlnaHQgYXR0aXR1ZGUgYW5kIGEgcHJvcGVyIHN0cnVjdHVyZSAocGxhbm5lZCBhbmQgaW1wb3NlZCBieSB5b3Vyc2VsZikgdG8geW91ciBkYXkgb3Igd2Vlay4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJ1IiwgW192bS5fdigiRnVsbCBzdG9yeSIpXSksCiAgICAgICAgX3ZtLl92KCI6ICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAiaHR0cHM6Ly9jb250ZW50LnJlbW90ZS50b29scy9hYm91dC1jb29raW5nLXBhc3RhLXdyaXRpbmctamF2YXNyaXB0LWFuZC13b3JraW5nLXJlbW90ZWx5P3JlZj1SZW1vdGVXb3JrMjAyMCIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkFib3V0IGNvb2tpbmcgcGFzdGEsIHdyaXRpbmcgSmF2YVNjcmlwdCBhbmQgd29ya2luZyByZW1vdGVseSIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDIiLAogICAgICAgIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIGlkOgogICAgICAgICAgICAgICJfMi1leC1nb29nbGUtY3VycmVudC1jb2RhLWFyY2hpdGVjdC1zaGFyZXMtcGVyc29uYWwtcmVtb3RlLXN0b3JpZXMiCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgIiNfMi1leC1nb29nbGUtY3VycmVudC1jb2RhLWFyY2hpdGVjdC1zaGFyZXMtcGVyc29uYWwtcmVtb3RlLXN0b3JpZXMiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiICMyOiBleC1Hb29nbGUsIGN1cnJlbnQgQ29kYSBhcmNoaXRlY3Qgc2hhcmVzIHBlcnNvbmFsIHJlbW90ZSBzdG9yaWVzIgogICAgICAgICAgKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICdBbMKgQ2hlbiBzaGFyZXPCoGhpcyBleHBlcmllbmNlcyBvZiB0cmFuc2l0aW9uaW5nIGZyb20gR29vZ2xlIHRvIGEgcmVtb3RlIHdvcmtpbmcgcm9sZS4gQSAiZGF0YS1sb3ZlciIsIGhlIHN0dW1ibGVkIGludG8gcmVtb3RlIHdvcmsgYnV0IGhhcyBzaW5jZSBhbHNvIGZhbGxlbiBpbiBsb3ZlIHdpdGggd29ya2luZyByZW1vdGVseS4gSGUgc3VyZWx5IHdvdWxkIGxpa2UgdG8gY2F0Y2ggbW9yZSBjYXN1YWwgY29mZmVlcyDimJXCoHdpdGggaGlzIGNvLXdvcmtlcnMsIHRob3VnaC4gRG8gcmVhZCBoaXMgc3RvcnkgLSBpdCBpcyBmdW4sIHJlYWwsIGFuZCwgaW1wb3J0YW50bHksIHZlcnkgaGVscGZ1bCEnCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJ1IiwgW192bS5fdigiRnVsbCBzdG9yeSIpXSksCiAgICAgICAgX3ZtLl92KCI6ICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAiaHR0cHM6Ly9jb250ZW50LnJlbW90ZS50b29scy9leC1nb29nbGUtY3VycmVudC1jb2RhLWFyY2hpdGVjdC1zaGFyZXMtcGVyc29uYWwtcmVtb3RlLXN0b3JpZXM/cmVmPVJlbW90ZVdvcmsyMDIwIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiZXgtR29vZ2xlLCBjdXJyZW50IENvZGEgQXJjaGl0ZWN0IHNoYXJlcyBwZXJzb25hbCByZW1vdGUgc3RvcmllcyIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDIiLAogICAgICAgIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIGlkOgogICAgICAgICAgICAgICJfMy10aGUtY29jb2Etbm9tYWQtc2hhcmVzLWhpcy1yZW1vdGUtd29yay1qb3VybmV5LW92ZXItMTAteWVhcnMiCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgIiNfMy10aGUtY29jb2Etbm9tYWQtc2hhcmVzLWhpcy1yZW1vdGUtd29yay1qb3VybmV5LW92ZXItMTAteWVhcnMiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiICMzOiBUaGUgQ29jb2EgTm9tYWQgc2hhcmVzIGhpcyByZW1vdGUgKHdvcmspIGpvdXJuZXkgb3ZlciAxMCsgeWVhcnMiCiAgICAgICAgICApCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkFsb25kbyBvciAodGhlKSBDb2NvYSBOb21hZCB0YWtlcyB1cyB0aHJvdWdoIDEwIHllYXJzIG9mIGhpcyByZW1vdGUgKHdvcmspIGpvdXJuZXkgdGhyb3VnaCBidWlsZGluZyBpT1MgYXBwcywgYmVpbmcgYSBtYWtlciwgcG9kY2FzdGVyIGFuZCBvZiBjb3Vyc2UsIGEgZGlnaXRhbCBub21hZC4gU2luY2UgMjAxNiwgaGUncyB0cmF2ZWxsZWQgbW9yZSB0aGFuIDMwIGNvdW50cmllcyBhbmQgd29ya2VkIGFzIGEgZnVsbC10aW1lIGVtcGxveWVlLCBmcmVlbGFuY2VyIGFuZCBldmVuIGFuIGVudHJlcHJlbmV1ci4gQWxvbmRvIGlzIGFsc28gbm93IHdvcmtpbmcgb24gcHJlcGFyaW5nIHRyYWluaW5nLyB0ZWFjaGluZyBtYXRlcmlhbHMgdG8gaGVscCBvdGhlcnMgYmVjb21lIHN1Y2Nlc3NmdWwgaW4gdHJhbnNpdGlvbmluZyB0byByZW1vdGUgd29yay4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJ1IiwgW192bS5fdigiRnVsbCBzdG9yeSIpXSksCiAgICAgICAgX3ZtLl92KCI6ICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAiaHR0cHM6Ly9jb250ZW50LnJlbW90ZS50b29scy90aGUtY29jb2Etbm9tYWQtc2hhcmVzLWhpcy1yZW1vdGUtd29yay1qb3VybmV5LW92ZXItMTAteWVhcnM/cmVmPVJlbW90ZVdvcmsyMDIwIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiVGhlIENvY29hIE5vbWFkIHNoYXJlcyBoaXMgcmVtb3RlICh3b3JrKSBqb3VybmV5IG92ZXIgMTArIHllYXJzIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIikKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoMiIsCiAgICAgICAgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgaWQ6CiAgICAgICAgICAgICAgIl80LWNyZWF0aW5nLW1vZGVybi1waXhlbC1wZXJmZWN0LXdlYnNpdGVzLXdoaWxlLWZyZWVsYW5jaW5nLXJlbW90ZWx5IgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICIjXzQtY3JlYXRpbmctbW9kZXJuLXBpeGVsLXBlcmZlY3Qtd2Vic2l0ZXMtd2hpbGUtZnJlZWxhbmNpbmctcmVtb3RlbHkiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiICM0OiBDcmVhdGluZyBtb2Rlcm4sIHBpeGVsLXBlcmZlY3Qgd2Vic2l0ZXMgd2hpbGUgZnJlZWxhbmNpbmcgKHJlbW90ZWx5KSIKICAgICAgICAgICkKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiU2lsdmVzdGFyIGRlbHZlZCBpbnRvIHJlbW90ZSB3b3JraW5nIHdoZW4gaGUgd29ya2VkIG9uIGhpcyBmaXJzdCBmcmVlbGFuY2luZyBwcm9qZWN0LiBIZSBoYXMgbG92ZWQgYWxtb3N0IGV2ZXJ5IGFzcGVjdCBvZiByZW1vdGUgZXZlciBzaW5jZS4gSGUgc2F5cyBmaW5kaW5nIG5ldyBmcmVlbGFuY2UgZ2lncyBpbiB0aGUgaW5pdGlhbCBtb250aHMsIHdhcyB0aGUgYmlnZ2VzdCBzdHJ1Z2dsZSBpbiBoaXMgcmVtb3RlIGNhcmVlci4gSGUgaXMgdGhhbmtmdWwgaW4gYSB3YXkgdG8gaGF2ZSBnb25lIHRocm91Z2ggdGhpcyBwZXJpb2Qgc2luY2UgaXQgdGF1Z2h0IGhpbSB0aGF0IHJlbW90ZSB3b3JraW5nIHRha2VzIHRpbWUgdG8gbWFzdGVyLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInUiLCBbX3ZtLl92KCJGdWxsIHN0b3J5IildKSwKICAgICAgICBfdm0uX3YoIjogIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICJodHRwczovL2NvbnRlbnQucmVtb3RlLnRvb2xzL2NyZWF0aW5nLW1vZGVybi1waXhlbC1wZXJmZWN0LXdlYnNpdGVzLXdoaWxlLWZyZWVsYW5jaW5nLXJlbW90ZWx5P3JlZj1SZW1vdGVXb3JrMjAyMCIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkNyZWF0aW5nIG1vZGVybiwgcGl4ZWwtcGVyZmVjdCB3ZWJzaXRlcyB3aGlsZSBmcmVlbGFuY2luZyAocmVtb3RlbHkpIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIikKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoMiIsCiAgICAgICAgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgaWQ6CiAgICAgICAgICAgICAgIl81LWZyb20tZGVudmVyLXRvLWxpdmluZy1hbmQtd29ya2luZy1yZW1vdGVseS1hY3Jvc3MtNTAtY291bnRyaWVzIgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICIjXzUtZnJvbS1kZW52ZXItdG8tbGl2aW5nLWFuZC13b3JraW5nLXJlbW90ZWx5LWFjcm9zcy01MC1jb3VudHJpZXMiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiICM1OiBGcm9tIERlbnZlciB0byBMaXZpbmcgYW5kIFdvcmtpbmcgUmVtb3RlbHkgYWNyb3NzIDUwIENvdW50cmllcyIKICAgICAgICAgICkKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAnUmVpZCBpbnRyb2R1Y2VzIGhpbXNlbGYgYXMgYSBWb29kb28gU29yY2VyZXIgYW5kIGlzIHRyeWluZyB0byBtYXN0ZXIgbWluaW1hbGlzbS4gV2UgcmVhbGx5IGxvdmVkIHRoZSB3YXkgaGUgaGFzIGFydGljdWxhdGVkIGhpcyBhZHZpY2U6ICJWZXJ5IGZldyBwZW9wbGUgYXJlIGJvcm4gaW50byBhbiBlbnZpcm9ubWVudCB0aGF0IHN1aXRzIHRoZW0gYmVzdDsgc29tZSBwZW9wbGUgbmV2ZXIgcmVhbGl6ZSB3aGVyZSB0aGV5IGxpdmUgaW5oaWJpdHMgdGhlaXIgaGFwcGluZXNzLiBaZWJyYXMgZG9u4oCZdCBiZWxvbmcgaW4gem9vcyBhbmQgSSBiZWxpZXZlIGh1bWFucyBkb27igJl0IGJlbG9uZyBpbiBvZmZpY2VzLiInCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJ1IiwgW192bS5fdigiRnVsbCBzdG9yeSIpXSksCiAgICAgICAgX3ZtLl92KCI6ICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAiaHR0cHM6Ly9jb250ZW50LnJlbW90ZS50b29scy9mcm9tLWRlbnZlci10by1saXZpbmctYW5kLXdvcmtpbmctcmVtb3RlbHktYWNyb3NzLTUwLWNvdW50cmllcz9yZWY9UmVtb3RlV29yazIwMjAiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJGcm9tIERlbnZlciB0byBMaXZpbmcgYW5kIFdvcmtpbmcgUmVtb3RlbHkgYWNyb3NzIDUwIENvdW50cmllcyIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDIiLAogICAgICAgIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIGlkOgogICAgICAgICAgICAgICJfNi1mcm9tLWEtZmFzaGlvbi1zdHlsaXN0LXRvLWEtZGlnaXRhbC1ub21hZC13cml0ZXItYW5kLXRyYW5zbGF0b3IiCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgIiNfNi1mcm9tLWEtZmFzaGlvbi1zdHlsaXN0LXRvLWEtZGlnaXRhbC1ub21hZC13cml0ZXItYW5kLXRyYW5zbGF0b3IiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiICM2OiBGcm9tIGEgZmFzaGlvbiBzdHlsaXN0IHRvIGEgZGlnaXRhbCBub21hZCB3cml0ZXIgYW5kIHRyYW5zbGF0b3IiCiAgICAgICAgICApCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkZlcm5hbmRhJ3Mgam91cm5leSBoYXMgYmVlbiBubyBsZXNzIHRoYW4gYSByb2xsZXIgY29hc3RlciByaWRlLiBCZWluZyBhIGZhc2hpb24gc3R5bGlzdCwgc2hlIHdhcyB0aXJlZCBvZiB0aGUgY29uc3RhbnQgYmFjayBhbmQgZm9ydGggcnVubmluZywgYmVpbmcgZm9yZXZlciByZWFkeSB3aXRoIG91dGZpdHMgYW5kIHN1cGVyIGZsZXhpYmxlIHdpdGggc2Vzc2lvbnMnIGRhdGVzLCBjcmF6eSBjZWxlYnJpdHkgcmVxdWVzdHMsIHRvIG5hbWUgYSBmZXcuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiU2hlIHN3aXRjaGVkIGNhcmVlcnMgYnkgbW92aW5nIHRvIGEgd3JpdGVyIGFuZCB0cmFuc2xhdG9yIHJvbGUgd2l0aCB0aGUgUmVtb3RlIFllYXIgcHJvZ3JhbS4gU2hlJ3Mgbm93IHNldHRsZWQgaW50byBhIGZ1bGwtdGltZSBmcmVlbGFuY2Ugcm9sZSBhbmQgY29udGludWVzIHRyYXZlbGxpbmcgd2hpbGUgd29ya2luZyB3aXRoIGNsaWVudHMgYWNyb3NzIHRoZSB3b3JsZC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJ1IiwgW192bS5fdigiRnVsbCBzdG9yeSIpXSksCiAgICAgICAgX3ZtLl92KCI6ICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAiaHR0cHM6Ly9jb250ZW50LnJlbW90ZS50b29scy9mcm9tLWEtZmFzaGlvbi1zdHlsaXN0LXRvLWEtZGlnaXRhbC1ub21hZC13cml0ZXItYW5kLXRyYW5zbGF0b3I/cmVmPVJlbW90ZVdvcmsyMDIwIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiRnJvbSBhIGZhc2hpb24gc3R5bGlzdCB0byBhIGRpZ2l0YWwgbm9tYWQgd3JpdGVyIGFuZCB0cmFuc2xhdG9yIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIikKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoMiIsCiAgICAgICAgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgaWQ6CiAgICAgICAgICAgICAgIl83LWxhdXJh4oCZcy1qb3VybmV5LXRocm91Z2gtcHJvZHVjdC1kZXNpZ24tdHJhdmVsbGluZy1kaWdpdGFsLW5vbWFkaW5nIgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICIjXzctbGF1cmHigJlzLWpvdXJuZXktdGhyb3VnaC1wcm9kdWN0LWRlc2lnbi10cmF2ZWxsaW5nLWRpZ2l0YWwtbm9tYWRpbmciCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiICM3OiBMYXVyYeKAmXMgam91cm5leSB0aHJvdWdoIHByb2R1Y3QgZGVzaWduLCB0cmF2ZWxsaW5nICYgZGlnaXRhbCBub21hZGluZyIKICAgICAgICAgICkKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiV2Ugd2VyZSBxdWl0ZSBpbnRyaWd1ZWQgd2hlbiBMYXVyYSBtZW50aW9uZWQgaG93IHJlbW90ZSB3b3JrIGhhcyBkb25lIHdvbmRlcnMgZm9yIGhlciBtZW50YWwgaGVhbHRoIGFzIHdlbGwuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAnSW4gaGVyIHdvcmRzLCAiSWYgZ29pbmcgdGhyb3VnaCBhIHJvdWdoIHBlcmlvZCwgdGhpcyBsZWF2ZXMgbWUgd2l0aCB0d28gYWx0ZXJuYXRpdmVzOiBiZWdydWRnaW5nbHkgZHJhZyBteXNlbGYgdG8gd29yaywgb3IgdGFrZSBzaWNrIGxlYXZlLiBCdXQgcmVtb3RlIHdvcmsgaGFzIGVtcG93ZXJlZCBtZSB0byBmb2N1cyBvbiB3b3JrIHdoaWxlIHN0YXlpbmcgaW4gYSBtb3JlIGNvbWZvcnRhYmxlIGVudmlyb25tZW50LiInCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJMYXVyYSBoYXMgdHJhbnNpdGlvbmVkIGZyb20gYW4gaW4tb2ZmaWNlIGpvYiB0byBsZWFkaW5nIGEgZ3JvdXAgb2YgNDAgZGlnaXRhbCBub21hZHMgb24gYSB5ZWFyLWxvbmcgdHJpcCBhbmQgZmluYWxseSB3b3JraW5nIGEgcmVtb3RlIGpvYiBhdCBJblZpc2lvbi4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJ1IiwgW192bS5fdigiRnVsbCBzdG9yeSIpXSksCiAgICAgICAgX3ZtLl92KCI6ICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAiaHR0cHM6Ly9jb250ZW50LnJlbW90ZS50b29scy9sYXVyYXMtam91cm5leS10aHJvdWdoLXByb2R1Y3QtZGVzaWduLXRyYXZlbGxpbmctZGlnaXRhbC1ub21hZGluZz9yZWY9UmVtb3RlV29yazIwMjAiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJMYXVyYeKAmXMgam91cm5leSB0aHJvdWdoIHByb2R1Y3QgZGVzaWduLCB0cmF2ZWxsaW5nICYgZGlnaXRhbCBub21hZGluZyIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDIiLAogICAgICAgIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIGlkOiAiXzgtZnJvbS1iZWluZy1hLXNrZXB0aWMtdG8tYS1zb2xpZC1hZHZvY2F0ZS1vZi1yZW1vdGUtd29yayIKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAiI184LWZyb20tYmVpbmctYS1za2VwdGljLXRvLWEtc29saWQtYWR2b2NhdGUtb2YtcmVtb3RlLXdvcmsiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgIzg6IEZyb20gYmVpbmcgYSBza2VwdGljIHRvIGEgc29saWQgYWR2b2NhdGUgb2YgcmVtb3RlIHdvcmsiKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJHYWJyaWVsIHdhcyBib3JuIGFuZCBicm91Z2h0IHVwIGluIFF1ZWJlYyBhbmQgaGlzIHByaW1hcnkgZ29hbCB3YXMgdG8gd29yayBpbiBhIGZpZWxkIGhlIGlzIHBhc3Npb25hdGUgYWJvdXQuIE9ubHkgZHVyaW5nIHRoZSBpbnRlcnZpZXcgZm9yIFYyIENsb3VkICh3aGVyZSBoZSBjdXJyZW50bHkgd29ya3MpIGRpZCBoZSBnZXQgdG8ga25vdyB0aGF0IGl0IHdvdWxkIGJlIGEgZnVsbHkgcmVtb3RlIGpvYi4gQWZ0ZXIgYmVpbmcgc2tlcHRpY2FsIGluaXRpYWxseSwgR2FicmllbCBoYXMgY29tZSB0byBiZWxpZXZlIHRoYXQgcmVtb3RlIHdvcmsgaXMgYSBodWdlIHBlcmsgYW5kIGluIGZhY3QsIGhhcyBiZWNvbWUgYSBzb2xpZCBhZHZvY2F0ZSBoaW1zZWxmLiBIZSBiZWxpZXZlcyBiZWluZyBzdWNjZXNzZnVsIGF0IHdvcmtpbmcgcmVtb3RlbHkgZGVwZW5kcyBsYXJnZWx5IG9uIGhvdyB3ZWxsIHlvdSBhZGFwdCB5b3Vyc2VsZiBhbmQgaG93IGRpc2NpcGxpbmVkIHlvdSBhcmUuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygidSIsIFtfdm0uX3YoIkZ1bGwgc3RvcnkiKV0pLAogICAgICAgIF92bS5fdigiOiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgImh0dHBzOi8vY29udGVudC5yZW1vdGUudG9vbHMvZnJvbS1iZWluZy1hLXNrZXB0aWMtdG8tYS1zb2xpZC1hZHZvY2F0ZS1vZi1yZW1vdGUtd29yaz9yZWY9UmVtb3RlV29yazIwMjAiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX3ZtLl92KCJGcm9tIGJlaW5nIGEgc2tlcHRpYyB0byBhIHNvbGlkIGFkdm9jYXRlIG9mIHJlbW90ZSB3b3JrIiksCiAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImgyIiwKICAgICAgICB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBpZDoKICAgICAgICAgICAgICAiXzktZnJvbS13b3JraW5nLXJlbW90ZWx5LXBhcnQtdGltZS10by1idWlsZGluZy1hLXJlbW90ZS1maXJzdC1jb21wYW55IgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICIjXzktZnJvbS13b3JraW5nLXJlbW90ZWx5LXBhcnQtdGltZS10by1idWlsZGluZy1hLXJlbW90ZS1maXJzdC1jb21wYW55IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiAjOTogRnJvbSB3b3JraW5nIHJlbW90ZWx5IHBhcnQtdGltZSB0byBidWlsZGluZyBhIHJlbW90ZS1maXJzdCBjb21wYW55IgogICAgICAgICAgKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJCb3JpcyBmaXJzdCB2ZW50dXJlZCBpbnRvIHJlbW90ZSB3b3JrIHdoZW4gaGlzIG1hbmFnZXIgYXQgS2lsb28gR2FtZXMgcHJvcG9zZWQgd29ya2luZyBwYXJ0LXRpbWUgd2hpbGUgcHVyc3VpbmcgaGlzIE1hc3RlcidzIGRlZ3JlZS4gSGUgc29vbiByZWFsaXNlZCB0aGF0IGl0IHdhcyBlYXN5IHRvIGJlIHByb2R1Y3RpdmUgYW5kIGdldCB0aGluZ3MgZG9uZSB3aGVuIHdvcmtpbmcgcmVtb3RlbHkuIEJvcmlzIHdlbnQgb24gdG8gYnVpbGQgaGlzIG93biBmdWxseSBkaXN0cmlidXRlZCBjb21wYW55IHRoZXJlYWZ0ZXIuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygidSIsIFtfdm0uX3YoIkZ1bGwgc3RvcnkiKV0pLAogICAgICAgIF92bS5fdigiOiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgImh0dHBzOi8vY29udGVudC5yZW1vdGUudG9vbHMvZnJvbS13b3JraW5nLXJlbW90ZWx5LXBhcnQtdGltZS10by1idWlsZGluZy1hLXJlbW90ZS1maXJzdC1jb21wYW55P3JlZj1SZW1vdGVXb3JrMjAyMCIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkZyb20gd29ya2luZyByZW1vdGVseSBwYXJ0LXRpbWUgdG8gYnVpbGRpbmcgYSByZW1vdGUtZmlyc3QgY29tcGFueSIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDIiLAogICAgICAgIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIGlkOgogICAgICAgICAgICAgICJfMTAtc3R1ZHlpbmctcHN5Y2hvbG9neS10by1maXJzdC1yZW1vdGUtZW1wbG95ZWUtdG8tYS1yZW1vdGUtcG0iCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgIiNfMTAtc3R1ZHlpbmctcHN5Y2hvbG9neS10by1maXJzdC1yZW1vdGUtZW1wbG95ZWUtdG8tYS1yZW1vdGUtcG0iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiICMxMDogU3R1ZHlpbmcgcHN5Y2hvbG9neSB0byBmaXJzdCByZW1vdGUgZW1wbG95ZWUgdG8gYSByZW1vdGUgUE0iCiAgICAgICAgICApCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkhhdmluZyBsaXZlZCBpbiBNaWFtaSwgRkwgaGVyIGVudGlyZSBsaWZlLCBJcm1hIGp1c3Qgd2FudGVkIHRvIGdldCBvdXQgYW5kIGV4cGVyaWVuY2UgYSBuZXcgZW52aXJvbm1lbnQuIFRoaXMgd2FzIGhlciBiaWcgcHVzaCB0byBnbyByZW1vdGUsIHdoZXJlaW4gc2hlIHBpdGNoZWQgdG8gaGVyIGJvc3NlcyBvbiBiZWNvbWluZyB0aGUgZmlyc3QgcmVtb3RlIGVtcGxveWVlIG9mIGhlciBjb21wYW55LiBJcm1hIG5vdyB3b3JrcyBhcyBhIHJlbW90ZSBwcm9kdWN0IG1hbmFnZXIsIGEgZnVuY3Rpb24gcGVvcGxlIGFyZSBzdGlsbCBza2VwdGljYWwgb2Ygd29ya2luZyB3ZWxsIGluIGEgcmVtb3RlIHNldHRpbmcuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygidSIsIFtfdm0uX3YoIkZ1bGwgc3RvcnkiKV0pLAogICAgICAgIF92bS5fdigiOiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgImh0dHBzOi8vY29udGVudC5yZW1vdGUudG9vbHMvc3R1ZHlpbmctcHN5Y2hvbG9neS10by1maXJzdC1yZW1vdGUtZW1wbG95ZWUtdG8tYS1yZW1vdGUtcG0/cmVmPVJlbW90ZVdvcmsyMDIwIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiU3R1ZHlpbmcgcHN5Y2hvbG9neSB0byBmaXJzdCByZW1vdGUgZW1wbG95ZWUgdG8gYSByZW1vdGUgUE0iCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImgyIiwKICAgICAgICB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBpZDoKICAgICAgICAgICAgICAiXzExLWEtY29udGVudC1jcmVhdG9yLXdoby1maW5kcy1jb21mb3J0LW1lbnRhbC13ZWxsYmVpbmctaW4tcmVtb3RlLXdvcmsiCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgIiNfMTEtYS1jb250ZW50LWNyZWF0b3Itd2hvLWZpbmRzLWNvbWZvcnQtbWVudGFsLXdlbGxiZWluZy1pbi1yZW1vdGUtd29yayIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgIzExOiBBIGNvbnRlbnQgY3JlYXRvciB3aG8gZmluZHMgY29tZm9ydCAmIG1lbnRhbCB3ZWxsYmVpbmcgaW4gcmVtb3RlIHdvcmsiCiAgICAgICAgICApCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkNhbmRhY2UgaXMgYSBjb250ZW50IGNyZWF0b3IgYmFzZWQgb3V0IG9mIFNlYXR0bGUgYW5kIHJlYWxpc2VkIHRoYXQgc2hlIHdhbnRlZCB0byB3b3JrIGZyb20gaG9tZSwgaW4gaGVyIGp1bmlvciB5ZWFyIG9mIGNvbGxlZ2UgaXRzZWxmLiBTaGUgc2F5cyBzaGUncyBuZXZlciBmZWx0IGNvbWZvcnRhYmxlIGluIGFuIG9mZmljZSBzZXR0aW5nIGFuZCBuZWVkcyB0byBiZSBjb3N5IGFuZCBhdCBlYXNlLCB0byBjb21wbGV0ZWx5IGZvY3VzIG9uIHdvcmsuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygidSIsIFtfdm0uX3YoIkZ1bGwgc3RvcnkiKV0pLAogICAgICAgIF92bS5fdigiOiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgImh0dHBzOi8vY29udGVudC5yZW1vdGUudG9vbHMvYS1jb250ZW50LWNyZWF0b3Itd2hvLWZpbmRzLWNvbWZvcnQtbWVudGFsLXdlbGxiZWluZy1pbi1yZW1vdGUtd29yaz9yZWY9UmVtb3RlV29yazIwMjAiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJBIGNvbnRlbnQgY3JlYXRvciB3aG8gZmluZHMgY29tZm9ydCAmIG1lbnRhbCB3ZWxsYmVpbmcgaW4gcmVtb3RlIHdvcmsiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImgyIiwKICAgICAgICB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBpZDoKICAgICAgICAgICAgICAiXzEyLWZyb20tZmlnaHRpbmctYXRsYW50YS10cmFmZmljLXRvLWJlY29taW5nLWEtcmVtb3RlLXdvcmstZXZhbmdlbGlzdCIKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAiI18xMi1mcm9tLWZpZ2h0aW5nLWF0bGFudGEtdHJhZmZpYy10by1iZWNvbWluZy1hLXJlbW90ZS13b3JrLWV2YW5nZWxpc3QiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiICMxMjogRnJvbSBmaWdodGluZyBBdGxhbnRhIHRyYWZmaWMgdG8gYmVjb21pbmcgYSByZW1vdGUgd29yayBldmFuZ2VsaXN0IgogICAgICAgICAgKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJDaGFuZWxsLCB3aG8gaXMgYSBncmFkdWF0ZSBvZiB0aGUgVW5pdmVyc2l0eSBvZiBHZW9yZ2lhLCBpcyBhIHJlbW90ZSBmcmVlbGFuY2Ugd3JpdGVyIGFuZCBhbHNvIGEgcmVtb3RlIHdvcmsgYWR2b2NhdGUuIFNoZSBzYXlzICdJIGNhbiB3b3JrIGF0IGEgbGlicmFyeSwgY29mZmVlIHNob3AsIGNvd29yayBmYWNpbGl0eSwgb3IgYXQgaG9tZS4nIENoYW5lbGwgaXMgY3VycmVudGx5IHdvcmtpbmcgb24gYW4gZS1ib29rIHRoYXQgaXMgbWVhbnQgdG8gaGVscCBwcm9mZXNzaW9uYWxzIHRyYW5zaXRpb24gZnJvbSBhIHJvdXRpbmUgam9iIHRvIHdvcmtpbmcgcmVtb3RlbHkuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygidSIsIFtfdm0uX3YoIkZ1bGwgc3RvcnkiKV0pLAogICAgICAgIF92bS5fdigiOiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgImh0dHBzOi8vY29udGVudC5yZW1vdGUudG9vbHMvZnJvbS1maWdodGluZy1hdGxhbnRhLXRyYWZmaWMtdG8tYmVjb21pbmctYS1yZW1vdGUtd29yay1ldmFuZ2VsaXN0P3JlZj1SZW1vdGVXb3JrMjAyMCIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkZyb20gZmlnaHRpbmcgQXRsYW50YSB0cmFmZmljIHRvIGJlY29taW5nIGEgcmVtb3RlIHdvcmsgZXZhbmdlbGlzdCIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDIiLAogICAgICAgIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIGlkOgogICAgICAgICAgICAgICJfMTMtaS10cmF2ZWxsZWQtdGhlLXdvcmxkLXdoaWxlLXJ1bm5pbmctbXktYnVzaW5lc3MtMTYtY291bnRyaWVzLWluLTEyLW1vbnRocyIKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAiI18xMy1pLXRyYXZlbGxlZC10aGUtd29ybGQtd2hpbGUtcnVubmluZy1teS1idXNpbmVzcy0xNi1jb3VudHJpZXMtaW4tMTItbW9udGhzIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiAjMTM6IEkgdHJhdmVsbGVkIHRoZSB3b3JsZCB3aGlsZSBydW5uaW5nIG15IGJ1c2luZXNzOiAxNiBjb3VudHJpZXMgaW4gMTIgbW9udGhzIgogICAgICAgICAgKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJNZWxpc3NhIFNtaXRoIGlzIHRoZSBmb3VuZGVyICYgQ0VPIG9mIHRoZSBBc3NvY2lhdGlvbiBvZiBWaXJ0dWFsIEFzc2lzdGFudHMgYW5kIGF1dGhvciBvZiB0d28gYm9va3Mgb24gdGhlIHN1YmplY3QuIFRoZSBtb3N0IGludGVyZXN0aW5nIHRoaW5nIGFib3V0IGhlciBpcyB0aGF0IHNoZSB0cmF2ZWxlZCAxNiBjb3VudHJpZXMgaW4gMjAxNyB3aGlsZSB3b3JraW5nIGFuZCBpbiBlZmZlY3QsIHN3aXRjaGVkIHRvIHJlbW90ZSB3b3JrIGNvbnN1bHRpbmcgcG9zdCB0aGF0LiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInUiLCBbX3ZtLl92KCJGdWxsIHN0b3J5IildKSwKICAgICAgICBfdm0uX3YoIjogIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICJodHRwczovL2NvbnRlbnQucmVtb3RlLnRvb2xzL2ktdHJhdmVsbGVkLXRoZS13b3JsZC13aGlsZS1ydW5uaW5nLW15LWJ1c2luZXNzLTE2LWNvdW50cmllcy1pbi0xMi1tb250aHM/cmVmPVJlbW90ZVdvcmsyMDIwIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiSSB0cmF2ZWxsZWQgdGhlIHdvcmxkIHdoaWxlIHJ1bm5pbmcgbXkgYnVzaW5lc3M6IDE2IGNvdW50cmllcyBpbiAxMiBtb250aHMiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImJyIiksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiY2VudGVyIiwgWwogICAgICAgIF9jKCJiIiwgW192bS5fdigiUEFSVE5FUlMiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJociIpLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBhdHRyczogeyBocmVmOiAiaHR0cHM6Ly93d3cuZmxleGlwbGUuY29tIiwgdGFyZ2V0OiAiX2JsYW5rIiB9IH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJwYXJ0bmVyLWxvZ28iLAogICAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogIi9hc3NldHMvZmxleGlwbGUtbG9nby1tb25vZ3JhbS5qcGciLCB3aWR0aDogIjgwLyIgfQogICAgICAgICAgICB9KQogICAgICAgICAgXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCJcbuKAg+KAg+KAg1xuIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IGF0dHJzOiB7IGhyZWY6ICJodHRwczovL3dld29ya3JlbW90ZWx5LmNvbSIsIHRhcmdldDogIl9ibGFuayIgfSB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicGFydG5lci1sb2dvIiwKICAgICAgICAgICAgICBhdHRyczogeyBzcmM6ICIvYXNzZXRzL1dXUi5wbmciLCB3aWR0aDogIjgwLyIgfQogICAgICAgICAgICB9KQogICAgICAgICAgXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCJcbuKAg+KAg+KAg1xuIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IGF0dHJzOiB7IGhyZWY6ICJodHRwczovL3J1bm5pbmdyZW1vdGUuY29tIiwgdGFyZ2V0OiAiX2JsYW5rIiB9IH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJwYXJ0bmVyLWxvZ28iLAogICAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogIi9hc3NldHMvcnVubmluZy1yZW1vdGUuanBnIiwgd2lkdGg6ICI4MC8iIH0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0KICAgICAgICApCiAgICAgIF0pCiAgICBdLAogICAgMQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}