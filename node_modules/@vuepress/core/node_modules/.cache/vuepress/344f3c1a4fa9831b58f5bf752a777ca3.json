{"remainingRequest":"/Users/Macbook/Documents/projects/remotework2020_new/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/Macbook/Documents/projects/remotework2020_new/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/Macbook/Documents/projects/remotework2020_new/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/Macbook/Documents/projects/remotework2020_new/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/Macbook/Documents/projects/remotework2020_new/docs/3b-how-to-tackle-loneliness.md?vue&type=template&id=24f81f76&","dependencies":[{"path":"/Users/Macbook/Documents/projects/remotework2020_new/docs/3b-how-to-tackle-loneliness.md","mtime":1577970658787},{"path":"/Users/Macbook/Documents/projects/remotework2020_new/node_modules/cache-loader/dist/cjs.js","mtime":1576060144534},{"path":"/Users/Macbook/Documents/projects/remotework2020_new/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1576060144779},{"path":"/Users/Macbook/Documents/projects/remotework2020_new/node_modules/cache-loader/dist/cjs.js","mtime":1576060144534},{"path":"/Users/Macbook/Documents/projects/remotework2020_new/node_modules/vue-loader/lib/index.js","mtime":1576060144779},{"path":"/Users/Macbook/Documents/projects/remotework2020_new/node_modules/@vuepress/markdown-loader/index.js","mtime":1576060144870}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJob3ctdG8tdGFja2xlLWxvbmVsaW5lc3MiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2hvdy10by10YWNrbGUtbG9uZWxpbmVzcyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEhvdyB0byB0YWNrbGUgbG9uZWxpbmVzcyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImVtIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAnIlJlbW90ZSB3b3JrIGlzIGZvciBpbnRyb3ZlcnRzIGFzIHRoZXkgZG9uXCd0IGxpa2UgaW50ZXJhY3Rpbmcgd2l0aCBvdGhlcnMgYW55d2F5Ii4nCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBJIGhhdmUgaGVhcmQgdGhpcyBmcm9tIGEgZmV3IGluZGl2aWR1YWxzLiBOb3RoaW5nIGNvdWxkIGJlIGZ1cnRoZXIgZnJvbSB0aGUgdHJ1dGgg8J+Yty4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJXZSwgYXMgaHVtYW5zLCBhcmUgc29jaWFsIGJlaW5ncy4gU29tZSBvZiB1cyBtaWdodCBub3QgYWNrbm93bGVkZ2UgdGhlIG5lZWQgZm9yIGh1bWFuIGludGVyYWN0aW9uIG9yIGV2ZW4gbGlrZSBpdCBhcyBhIGNvbmNlcHQsIGhvd2V2ZXIsIGl0IGlzIGNsZWFyIHRoYXQgaXJyZXNwZWN0aXZlIG9mIG91ciBwZXJzb25hbGl0eSB0eXBlcywgd2UgcmVxdWlyZSBpdC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoMiIsCiAgICAgICAgewogICAgICAgICAgYXR0cnM6IHsgaWQ6ICJwb3B1bGFyLW1pc2NvbmNlcHRpb24tb2YtdGhlLXJlbW90ZS13b3JraW5nLWxpZmVzdHlsZSIgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICIjcG9wdWxhci1taXNjb25jZXB0aW9uLW9mLXRoZS1yZW1vdGUtd29ya2luZy1saWZlc3R5bGUiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgUG9wdWxhciBtaXNjb25jZXB0aW9uIG9mIHRoZSByZW1vdGUgd29ya2luZyBsaWZlc3R5bGUiKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJCb3Jyb3dpbmcgZnJvbSBzdGF0cyBmcm9tIHRoZSBwcmV2aW91cyBzZWN0aW9uOiB4eCUgZmVlbCB0aGF0IGxvbmVsaW5lc3MgaXMgb25lIG9mIHRoZWlyIG1haW4gcHJvYmxlbXMgYXMgYSByZXN1bHQgb2Ygd29ya2luZyByZW1vdGVseS4gRnVydGhlciwgeXklIGFyZSB1bmFibGUgdG8gc2VwYXJhdGUgd29yayBmcm9tIHRoZWlyIHBlcnNvbmFsIGxpZmUsIGxlYWRpbmcgdG8gYSBmdXJ0aGVyIGRldGVyaW9yYXRpb24gb2YgbWVudGFsIGhlYWx0aC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICdIb3dldmVyLCB0aGUgcG9wdWxhciBjb25jZXB0IG9mIHJlbW90ZSB3b3JrIGlzIHRvIGJlIGF0IGEgYmVhdXRpZnVsIGxvY2FsZSBzaXBwaW5nIG9uIGEgUGnDsWEgY29sYWRhIPCfmIIhIE9mIGNvdXJzZSwgd29ya2luZyByZW1vdGVseSBhbGxvd3Mgb25lIHRvIGJlIGxvY2F0aW9uIGluZGVwZW5kZW50LCB3aGljaCBpcyBub3QgcG9zc2libGUgb3RoZXJ3aXNlLiBUaG9zZSB3aXRoIHRoZSB0cmF2ZWwgYnVnIGdldCB0aGUgb3Bwb3J0dW5pdHkgdG8gZGlwIGludG8gdGhlaXIgcGFzc2lvbi4gQnV0LCBmb3IgYWxsIHRoZSBmaXJzdC10aW1lIHJlbW90ZSB3b3JrZXJzIG91dCB0aGVyZSwgd2UgbmVlZCB0byBsb29rIGF0IHRoaXMgImRlc2lyYWJsZSIgbGlmZXN0eWxlIHdpdGggYmV0dGVyIHBlcnNwZWN0aXZlLicKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJJbiB0aGlzIGNvbnRleHQsIEkgY2FuJ3QgcmVjb21tZW5kIEFtaXIncyAoQ0VPIG9mIERvaXN0KSAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9kb2lzdC5jb20vYmxvZy9tZW50YWwtaGVhbHRoLWFuZC1yZW1vdGUtd29yay8iLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoImJsb2cgb24gbWVudGFsIHdlbGxiZWluZyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBlbm91Z2guIEhlIG1lbnRpb25zIGhvdyBoZSBwYWNrZWQgdXAgaGlzIHN0dWZmIGFuZCB2ZW50dXJlZCBvbiBhIHRyaXAgdG8gVGFpd2FuIHdpdGgganVzdCBhIG9uZS13YXkgdGlja2V0IGluIHRoZSBpbW1lZGlhY3kgb2YgYnJlYWtpbmcgdXAgd2l0aCBoaXMgZ2lybGZyaWVuZC4gVGhlIGlkZWEgd2FzIHRvIHJlYWxpc2UgYSB0eXBpY2FsIHRyYXZlbGxlcidzIGRyZWFtLiBUbyBxdW90ZSBoaXMgZXhwZXJpZW5jZToiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJibG9ja3F1b3RlIiwgWwogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAnIkF0IHRoZSB0aW1lLCBJIGhhZCBubyBpZGVhIHRoYXQgdGhpcyB3b3VsZCBiZSB0aGUgc3RhcnQgb2YgdGhlIHVuaGFwcGllc3QgcGVyaW9kIG9mIG15IGxpZmUuIEZvciB0aGUgcmVjb3JkLCBlbmRpbmcgYSBsb25nLXRlcm0gcmVsYXRpb25zaGlwIGFuZCBtb3ZpbmcgYXdheSBmcm9tIGZhbWlseSwgZnJpZW5kcywgYW5kIGFueSBvdGhlciBtZWFuaW5nZnVsIGh1bWFuIGNvbm5lY3Rpb24geW91IG1pZ2h0IGhhdmUgaW4gdGhlIHdvcmxkIGlzIGEgdGVycmlibGUgaWRlYS4gQ291cGxlIHRoYXQgd2l0aCBhIG5vbi1leGlzdGVudCB3b3JrLWxpZmUgYmFsYW5jZSwgYW5kIHlvdSBoYXZlIGFuIGV4Y2VsbGVudCByZWNpcGUgZm9yIG1pc2VyeS4iJwogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInRha2Vhd2F5cy1mcm9tLWRvaXN0LXMtaW5pdGlhdGl2ZXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3Rha2Vhd2F5cy1mcm9tLWRvaXN0LXMtaW5pdGlhdGl2ZXMiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBUYWtlYXdheXMgZnJvbSBEb2lzdCdzIGluaXRpYXRpdmVzIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQSBmZXcgY2xlYXIgbmV4dCBzdGVwcyBmb3IgYWxsIHJlbW90ZSB3b3JrZXJzIGFyZSBsaXN0ZWQgYmVsb3c6IgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygib2wiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJBY2tub3dsZWRnZSB0aGUgY2hhbGxlbmdlIildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICI6IE1lbnRhbCBoZWFsdGggY2hhbGxlbmdlcyBhY2NvbXBhbnlpbmcgcmVtb3RlIHdvcmsgYXJlIGZvciByZWFsIGFuZCBpdCBpcyBoaWdoIHRpbWUgd2Ugb3Blbmx5IGFja25vd2xlZGdlIHRoZW0uIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQnVpbGQgYW4gb3BlbiBlbnZpcm9ubWVudCIpXSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiOiBJdCdzIGVhc3kgdG8gYXNzdW1lIGV2ZXJ5dGhpbmcncyBvayB3aGVuIHlvdSBkb24ndCBzZWUgb3IgbWVldCB5b3VyIGNvd29ya2Vycy4gVGhlcmUgaXMgYSBuZWVkIHRvIGNyZWF0ZSBhbiBlbnZpcm9ubWVudCB0aGF0IGVuY291cmFnZXMgb3BlbiBjb252ZXJzYXRpb25zIGFyb3VuZCB0aGlzLiIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlN1cHBvcnQgeW91ciBjby13b3JrZXJzIildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICI6IEl0IGlzIGltcG9ydGFudCB0byBzdXBwb3J0IHlvdXIgY28td29ya2VycyB3aG8gYXJlIGhhdmluZyBwcm9ibGVtcyB3aXRoIGRlcHJlc3Npb24sIGFueGlldHkgb3Igc3RyZXNzLiIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkluY3VsY2F0ZSBpdCBpbiB5b3VyIGNvbXBhbnkncyBjdWx0dXJlIildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICI6IENvbXBhbnkgY3VsdHVyZSBuZWVkcyB0byByZWZsZWN0IGNvbmNyZXRlIHN0ZXBzIHRoYXQgc3VwcG9ydCBtZW50YWwgd2VsbGJlaW5nIGUuZy4gRG9pc3QgaGFzIGNvd29ya2luZyBwZXJrcyBhbmQgc2ljayBkYXlzIGZvciBtZW50YWwgaGVhbHRoLiBCZWxvdyBpcyBhIHNjcmVlbnNob3Qgb2YgdGhlIHV0aWxpc2F0aW9uIG9mIHN1Y2ggYSBwb2xpY3khIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAiaHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3NsaXRlLWFwaS1maWxlcy1wcm9kdWN0aW9uL2ZpbGVzLzJmMjZiZWEzLWViNTMtNGFjZS1iYzBkLTc5MTJiNWFjYTdlNy9pbWFnZS5wbmciLAogICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAic29tZS1wZXJzb25hbC1pbml0aWF0aXZlcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjc29tZS1wZXJzb25hbC1pbml0aWF0aXZlcyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFNvbWUgcGVyc29uYWwgaW5pdGlhdGl2ZXMiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJBdCBhIHBlcnNvbmFsIGxldmVsLCB0byBlbnN1cmUgdGhhdCB5b3UgY29udGludWUgdG8gcmVtYWluIG1lbnRhbGx5IHN1cGVyLWZpdCwgYmVsb3cgYXJlIHNvbWUgc3RlcHMgdGhhdCB5b3UgY2FuIHRha2U6IgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkNsZWFyIHdvcmsgYXJlYSAmIHRpbWluZ3MiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiOiBFc3RhYmxpc2ggYSBjbGVhciB3b3Jrc3BhY2UsIGJlIGl0IGF0IHlvdXIgaG91c2Ugb3Igb3RoZXJ3aXNlLiBVbmNsZWFyIGxpbmVzIG9mIHdvcmsgc3BhY2UgYW5kIHBlcnNvbmFsIHNwYWNlIHJlc3VsdCBpbiBhIHRvdGFsIG1lc3Mgb2Ygd29yay1saWZlIGJhbGFuY2UuIFdoaWxlIHlvdXIgdGltaW5ncyBjYW4gYmUgZmxleGlibGUsIG1vc3QgcmVtb3RlIHdvcmtlcnMgd2UgaGF2ZSBzcG9rZW4gdG8gYWdyZWUgdGhhdCBoYXZpbmcgYSByZWd1bGFyIGNhZGVuY2Ugb2Ygd29ya2luZyBob3VycywgaGVscHMgaW4gYmV0dGVyIHByb2R1Y3Rpdml0eSBhbmQgc3RydWN0dXJlIGluIHRoZWlyIGxpdmVzLiBTbywgaXQgaXMgYmV0dGVyIHRvIGNob29zZSBhIHN0YW5kYXJkIHNldCBvZiB3b3JrIGhvdXJzIG1vc3QgY29udmVuaWVudCB0byB5b3UuIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImJsb2NrcXVvdGUiLCBbCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICciV2l0aCBteSBjdXJyZW50IHJvbGUgYXQgQ29kYSwgSSBhbSBzdGlsbCB3b3JraW5nIHJlbW90ZWx5IGluIE5ZQyBidXQgdGhlcmUgaXMgYSBsaXR0bGUgbW9yZSBzdHJ1Y3R1cmUgdG8gbXkgZGF5ICh3aGljaCBJIGxpa2UpLiBJIGRlZmluaXRlbHkgYXBwcmVjaWF0ZSB0aGUgbm9tYWRpYyBsaWZlc3R5bGUsIGJ1dCBpdOKAmXMgbm90IHNvbWV0aGluZyBJIGNvdWxkIGRvIGZvciBhIG1vbnRoIG9yIHllYXIuIEhhdmluZyBhIHdlZWtseSBjYWRlbmNlIHRvIG15IG1lZXRpbmdzIGFuZCBwcm9qZWN0cyBkb2VzIGdpdmUgbWUgYSBzZW5zZSBvZiBzdGFiaWxpdHkgYW5kIGFsc28ga2VlcHMgbWUg4oCccGx1Z2dlZCBpbuKAnSB3aXRoIHRoZSByZXN0IG9mIG15IHRlYW0gb24gdGhlIHdlc3QgY29hc3QuJwogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImJsb2NrcXVvdGUiLCBbCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgICBfdm0uX3YoIi0gQWwgQ2hlbiwgU29sdXRpb25zIEFyY2hpdGVjdCBhbmQgRXZhbmdlbGlzdCBhdCBDb2RhLmlvIikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkluZHVsZ2luZyB5b3VyIHBhc3Npb24iKV0pLAogICAgICAgICAgX3ZtLl92KCI6IEFzIHNlZW4gaW4gdGhlIHR3ZWV0IGJ5ICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9zbGl0ZS5jb20vYXBpL3B1YmxpYy9ub3Rlcy82NVRSbHRBQjZRL3JlZGlyZWN0IiwKICAgICAgICAgICAgICAgIHRpdGxlOiAiQWxsYW4gS2plbGxzdHLDuG0gQ2hyaXN0ZW5zZW4sIENPTyAtIERvaXN0IiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF92bS5fdigiQWxsYW4gS2plbGxzdHLDuG0gQ2hyaXN0ZW5zZW4sIENPTyAtIERvaXN0IiksCiAgICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIsIGFsbG9jYXRpbmcgdGltZSBmb3IgYW5kIGRpdmluZyBkZWVwIGludG8geW91ciBwYXNzaW9ucyBhbGxvd3MgeW91IHRvIHJlY292ZXIgbWVudGFsbHkuIEl0IGNvdWxkIGJlIHBvdHRlcnksIG11c2ljLCBnYXJkZW5pbmcgb3IgdGhlIGxpa2UgLSBhbnl0aGluZyB0aGF0IGludGVyZXN0cyB5b3UsIGNhbiBoYXZlIGEgZ3JlYXQgY2FsbWluZyBlZmZlY3QhIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJDby13b3JraW5nIHNwYWNlcyIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICI6IFdoaWxlIGEgaG9tZSBvZmZpY2Ugd29ya3MganVzdCBmaW5lLCBpdCBpcyBzdGlsbCBqdXN0IHlvdSBhbG9uZSBpbiBhIHJvb20uIE1vdmluZyBvdXQgb2YgeW91ciBob21lIGFuZCBpbnRvIGEgY28td29ya2luZyBzcGFjZSBhbGxvd3MgeW91IHRvIG1lZXQgb3RoZXIgcGVvcGxlLiBXaGlsZSB5b3UgZG9uJ3QgaGF2ZSB0byBhbmQgbGlrZWx5IHdvdWxkbid0IGJlIHRhbGtpbmcgdG8gdGhlbSBhbGwgdGhlIHRpbWUsIHlvdSBzdGlsbCBnZXQgYWNjZXNzIHRvIFwiY29mZmVlIGJyZWFrc1wiIG90aGVyd2lzZSBhYnNlbnQgYXQgaG9tZS4gRXZlbiBpZiB5b3Ugd29yayBvdXQgb2YgYSBob21lIG9mZmljZSwgb2NjYXNpb25hbGx5IGdvaW5nIHRvIGEgY28td29ya2luZyBzcGFjZSBvciBldmVuIGEgY29mZmVlIHNob3AgdG8gd29yayBtaWdodCBiZSBleHRyZW1lbHkgcmVmcmVzaGluZyDwn5iLISIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJibG9ja3F1b3RlIiwgWwogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiXCJJIGhhdmUgd29ya2VkIGluIGFuIG9mZmljZSBmcm9tIGhvbWUgZm9yIGFib3V0IGEgeWVhciwgYnV0IGl0IGluZGVlZCBnb3QgbG9uZWx5LiBNeSB3b3JsZCBmZWx0IHZlcnkgc21hbGwsIGV2ZW4gdGhvdWdoIEkgaGF2ZSBhIGZhbWlseSB3aXRoIChhdCB0aGUgdGltZSkgMSBraWQsIGFuZCBldmVuIHRob3VnaCBJIGhhZCB3ZWVrbHkgaGFuZ291dHMgd2l0aCBteSBjbGllbnQuIFRoZW4sIEkgcmFuIGludG8gYSBjby13b3JraW5nIHNwYWNlLCBvciBodWIsIHdoZXJlIG1hbnkgZnJlZWxhbmNlcnMgd29yayBcInRvZ2V0aGVyXCIgaW4gYSBraW5kIG9mIG9wZW4gcGxhbiBvZmZpY2UuIEl0J3Mgbm90IHRoYXQgd2UgdGFsayBhbGwgdGhlIHRpbWUsIHRoZSBpbnRlcmFjdGlvbiB3aXRoIG90aGVyIHBlb3BsZSBpcyBxdWl0ZSBtaW5pbWFsLCB5ZXQgaXQgbWFrZXMgYWxsIHRoZSBkaWZmZXJlbmNlLiBUaGF0IHBsYWNlIGlzIG5vdyBnb25lLCBiZWNhdXNlIHRoZSBidWlsZGluZyBnb3QgZGVtb2xpc2hlZCwgYnV0IEkndmUgZm91bmQgYSBzaW1pbGFyIHNwb3QuIEluIHRoaXMgcGxhY2Ugd2UgYWxzbyBoYXZlIGx1bmNoIHRvZ2V0aGVyLCBhbmQgdGhhdCdzIGFuIGF3ZXNvbWUgd2F5IHRvIGJlIGZvcmNlZCB0byBzdG9wIHdvcmtpbmcgZm9yIGEgYml0IGFuZCBzb2NpYWxpemUuIFdvdWxkIHByZWZlciBpdCBvdmVyIGEgaG9tZSBvZmZpY2UgKG9yIGFueSAxLXBlcnNvbiBvZmZpY2UpIGFueXRpbWUg8J+YhCIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJibG9ja3F1b3RlIiwgWwogICAgICAgIF9jKCJwIiwgW19jKCJzdHJvbmciLCBbX3ZtLl92KCItIEFsbWFyIEtsZWluLCA8eHg+IildKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJOZXR3b3JraW5nIGV2ZW50cyIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICI6IFRoZXNlIGNvdWxkIGJlIGV2ZW50cyB0byBidWlsZCB5b3VyIHNraWxsc2V0cyBvciBqdXN0IGEgZ3JvdXAgb2YgbGlrZS1taW5kZWQgcGVvcGxlIGdldHRpbmcgdG9nZXRoZXIuIEVpdGhlciB3YXksIGl0IGlzIGEgZ3JlYXQgb3V0bGV0IHRvIGJyZWFraW5nIHRoZSBtb25vdG9ueSBvZiB3b3JraW5nIGFsb25lIGFuZCBhbHNvIGxlYXJuaW5nIGEgZmV3IG5ldyB0aGluZ3MgYWxvbmcgdGhlIHdheSEiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0KICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}