{"remainingRequest":"/Users/Macbook/Documents/projects/FreelancerReport2020/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/Macbook/Documents/projects/FreelancerReport2020/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/Macbook/Documents/projects/FreelancerReport2020/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/Macbook/Documents/projects/FreelancerReport2020/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/Macbook/Documents/projects/FreelancerReport2020/docs/4-how-much-does-it-cost-to-hire-a-developer.md?vue&type=template&id=1aee1d8c&","dependencies":[{"path":"/Users/Macbook/Documents/projects/FreelancerReport2020/docs/4-how-much-does-it-cost-to-hire-a-developer.md","mtime":1586246633002},{"path":"/Users/Macbook/Documents/projects/FreelancerReport2020/node_modules/cache-loader/dist/cjs.js","mtime":1576060144534},{"path":"/Users/Macbook/Documents/projects/FreelancerReport2020/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1576060144779},{"path":"/Users/Macbook/Documents/projects/FreelancerReport2020/node_modules/cache-loader/dist/cjs.js","mtime":1576060144534},{"path":"/Users/Macbook/Documents/projects/FreelancerReport2020/node_modules/vue-loader/lib/index.js","mtime":1576060144779},{"path":"/Users/Macbook/Documents/projects/FreelancerReport2020/node_modules/@vuepress/markdown-loader/index.js","mtime":1582710536446}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}