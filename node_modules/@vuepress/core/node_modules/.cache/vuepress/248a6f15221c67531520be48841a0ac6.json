{"remainingRequest":"/Users/Macbook/Documents/projects/FreelancerReport2020/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/Macbook/Documents/projects/FreelancerReport2020/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/Macbook/Documents/projects/FreelancerReport2020/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/Macbook/Documents/projects/FreelancerReport2020/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/Macbook/Documents/projects/FreelancerReport2020/docs/2-current-trends.md?vue&type=template&id=585d342a&","dependencies":[{"path":"/Users/Macbook/Documents/projects/FreelancerReport2020/docs/2-current-trends.md","mtime":1582714296404},{"path":"/Users/Macbook/Documents/projects/FreelancerReport2020/node_modules/cache-loader/dist/cjs.js","mtime":1576060144534},{"path":"/Users/Macbook/Documents/projects/FreelancerReport2020/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1576060144779},{"path":"/Users/Macbook/Documents/projects/FreelancerReport2020/node_modules/cache-loader/dist/cjs.js","mtime":1576060144534},{"path":"/Users/Macbook/Documents/projects/FreelancerReport2020/node_modules/vue-loader/lib/index.js","mtime":1576060144779},{"path":"/Users/Macbook/Documents/projects/FreelancerReport2020/node_modules/@vuepress/markdown-loader/index.js","mtime":1582710536446}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJjdXJyZW50LXRyZW5kcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjY3VycmVudC10cmVuZHMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEN1cnJlbnQgVHJlbmRzIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAidHdlZXRzLXF1b3Rlcy1hYm91dC1mcmVlbGFuY2luZyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjdHdlZXRzLXF1b3Rlcy1hYm91dC1mcmVlbGFuY2luZyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJUd2VldHMgJiBRdW90ZXMgYWJvdXQgRnJlZWxhbmNpbmciKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCI8Li4uPiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAidGhlLWZyZWVsYW5jZS1yZXZvbHV0aW9uLWluLW51bWJlcnMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3RoZS1mcmVlbGFuY2UtcmV2b2x1dGlvbi1pbi1udW1iZXJzIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgVGhlIEZyZWVsYW5jZSBSZXZvbHV0aW9uIGluIE51bWJlcnMiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIxLiBDdXJyZW50bHkgYXQgNTggbWlsbGlvbiBhbmQgY291bnRpbmcsIGZyZWVsYW5jaW5nIGlzIHBvaXNlZCB0byBiZWNvbWUgdGhlIFUuUy4gbWFqb3JpdHkgd29ya2ZvcmNlIGJ5IDIwMjciCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQ3VycmVudGx5IGNvbnRyaWJ1dGluZyBvdmVyICQxLjQgdHJpbGxpb24gdG8gdGhlIFUuUy4gZWNvbm9teSwgdGhlIHN0ZWFkeSBpbmNyZWFzZSBpbiB0aGUgbnVtYmVyIG9mIHNraWxsZWQgaW5kaXZpZHVhbHMgdGFraW5nIHVwIGZyZWVsYW5jaW5nIGV2ZXJ5IHllYXIgaGFzIG1hZGUgZnJlZWxhbmNlcnMgdGhlIGZhdm9yaXRlIHRvIGJlY29tZSB0aGUgVS5TLiBtYWpvcml0eSB3b3JrZm9yY2Ugd2l0aGluIHRoZSBuZXh0IGZldyB5ZWFycy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgImh0dHBzOi8vc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9zbGl0ZS1hcGktZmlsZXMtcHJvZHVjdGlvbi9maWxlcy80MWI0YTExNS02ZDE5LTRiYjMtYjE0Ni0zYTc3ZDNjN2EyMjAvU2xpZGU1LkpQRyIsCiAgICAgICAgICAgIGFsdDogIlNsaWRlNS5KUEciCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiMi4gR29vZ2xlJ3Mgd29ya2ZvcmNlIGhhcyBtb3JlIGZyZWVsYW5jZXJzIHRoYW4gcGVybWFuZW50IGVtcGxveWVlcyIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJBcyBvZiBNYXJjaCAyMDE5LCBHb29nbGUncyB3b3JrZm9yY2UgY29tcHJpc2VkIG9mIDEyMCwwMDAgY29udHJhY3RvcnMvZnJlZWxhbmNlcnMsIG1vcmUgdGhhbiB0aGUgbnVtYmVyIG9mIHBlcm1hbmVudCBlbXBsb3llZXMgb24gaXRzIHBheXJvbGwsIHdoaWNoIHdhcyBhcm91bmQgMTAyLDAwMC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgImh0dHBzOi8vc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9zbGl0ZS1hcGktZmlsZXMtcHJvZHVjdGlvbi9maWxlcy9hMWQ3MzJiZS0wZjVlLTQwZWMtOGU5MS0yNWU2NThlYWZhNzMvU2xpZGUxLkpQRyIsCiAgICAgICAgICAgIGFsdDogIlNsaWRlMS5KUEciCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiMy4gQ291bnRyaWVzIHdpdGggbG93ZXIgZG9tZXN0aWMgd29yayBvcHBvcnR1bml0aWVzIGFyZSBzZWVpbmcgYSBzdXJnZSBpbiBmcmVlbGFuY2UgcHJvZmVzc2lvbmFscyIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJGcmVlbGFuY2luZyBpcyBwcm92aWRpbmcgYSB2aWFibGUgY2FyZWVyIHBhdGggZm9yIHNraWxsZWQgcHJvZmVzc2lvbmFscyBpbiByZWdpb25zIHdoZXJlIGRvbWVzdGljIG9wcG9ydHVuaXRpZXMgYXJlIGxvdyAtIG93aW5nIHRvIHRoZSByaXNlIG9mIHJlbW90ZSB0ZWFtcy4gUGFraXN0YW4sIFVrcmFpbmUsIFBoaWxpcHBpbmVzLCBJbmRpYSwgJiBCYW5nbGFkZXNoIHJhbmsgaW4gdGhlIFRvcCAxMCBjb3VudHJpZXMgd2l0aCB0aGUgZmFzdGVzdC1ncm93aW5nIGVhcm5pbmdzIGZvciBmcmVlbGFuY2Vycy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgImh0dHBzOi8vc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9zbGl0ZS1hcGktZmlsZXMtcHJvZHVjdGlvbi9maWxlcy8xZDk4M2NjZS1iYjM1LTQzYTMtYmM4Ny0xZWFhNWMyZmNlMWUvU2xpZGUyLkpQRyIsCiAgICAgICAgICAgIGFsdDogIlNsaWRlMi5KUEciCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgX3ZtLl92KCI0LiBGcmVlbGFuY2VycyBhcmUgcHJvdmluZyB0byBiZSBnYW1lLWNoYW5nZXJzIGZvciBTTUJzIikKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJQcm92aWRpbmcgYSBjb3N0LWVmZmVjdGl2ZSBhbmQgZmxleGlibGUgc29sdXRpb24sIGZyZWVsYW5jZXJzIGFyZSBoZWxwaW5nIFNNQnMgYWNoaWV2ZSB0aGVpciBncm93dGggcGxhbnMuIFJlcG9ydHMgaW5kaWNhdGUgdGhhdCBTTUJzIGFyZSBoYXBweSB3aXRoIGZyZWVsYW5jZXJzIGFuZCBhcmUgbG9va2luZyB0byBpbmNyZWFzZSB0aGVpciB1c2Ugb2YgZnJlZWxhbmNlcnMgaW4gdGhlIGZ1dHVyZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICI3MCUgb2YgU01CcyBpbiB0aGUgVS5TLiBoYXZlIHdvcmtlZCB3aXRoIGZyZWVsYW5jZXJzIGF0IGxlYXN0IG9uY2UiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiODElIG9mIHRoZXNlIGNvbXBhbmllcyBwbGFuIHRvIGhpcmUgZnJlZWxhbmNlcnMgYWdhaW4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiODMlIGFncmVlIHRoYXQgZnJlZWxhbmNlcnMgaGF2ZSBncmVhdGx5IGhlbHAgdGhlaXIgYnVzaW5lc3MiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgImh0dHBzOi8vc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9zbGl0ZS1hcGktZmlsZXMtcHJvZHVjdGlvbi9maWxlcy85MTY3NDFiNC0wZDFjLTQ1MGMtODYyZi05NWY2OGE4NzRkZTAvU2xpZGU0LkpQRyIsCiAgICAgICAgICAgIGFsdDogIlNsaWRlNC5KUEciCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgX3ZtLl92KCI1LiBBbG1vc3QgaGFsZiBvZiBhbGwgYnVzaW5lc3NlcyBlbXBsb3kgZnJlZWxhbmNlcnMiKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIjQ4JSBvZiBidXNpbmVzc2VzIGhpcmVkIGZyZWVsYW5jZXJzIGluIDIwMTgsIHVwIGZyb20gNDMlIGluIDIwMTcuIFRoaXMgaXMgZXhwZWN0ZWQgdG8gaW5jcmVhc2Ugc3RlYWRpbHkgYXMgdGhlIGVhc2Ugb2YgaGlyaW5nIGZyZWVsYW5jZXJzIGluY3JlYXNlcyBhbmQgY29tcGFueSBwb2xpY2llcyBiZWNvbWUgbW9yZSBhbGlnbmVkIHRvIHByb2Nlc3NlcyBsaWtlIHJlbW90ZSB3b3JraW5nLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAiaHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3NsaXRlLWFwaS1maWxlcy1wcm9kdWN0aW9uL2ZpbGVzL2RkY2Q2YzQwLWIyMzMtNDQ3YS1hZDFjLTY4NjM4OGRiMGY5OC9TbGlkZTMuSlBHIiwKICAgICAgICAgICAgYWx0OiAiU2xpZGUzLkpQRyIKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICI2LiBGcmVlbGFuY2luZyBvcHBvcnR1bml0aWVzIGFyZSByaXNpbmcgd2l0aCBvbmxpbmUgZnJlZWxhbmNpbmcgcGxhdGZvcm1zIGJlaW5nIHRoZSBjYXRhbHlzdHMiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiNzElIG9mIGZyZWVsYW5jZXJzIHJlcG9ydGVkIGFuIGluY3JlYXNlIGluIHRoZSBhbW91bnQgb2Ygd29yayB0aGV5IHdlcmUgYWJsZSB0byBhdHRyYWN0IG9ubGluZSBvdmVyIHRoZSBsYXN0IHNldmVyYWwgeWVhcnMgLSB3aXRoIG9ubGluZSBwbGF0Zm9ybXMgcHJvdmlkaW5nIGEgZ3JlYXQgbWVkaXVtIGZvciBjb25uZWN0aW5nIGZyZWVsYW5jZXJzIHRvIGNvbXBhbmllcyAmIHZpY2UtdmVyc2EuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiNy4gV29yayBkb25lIGJ5IGZyZWVsYW5jZXJzIHRvIG1vcmUgdGhhbiBkb3VibGUgb3ZlciB0aGUgbmV4dCAxMCB5ZWFycyIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJIaXJpbmcgbWFuYWdlcnMgZXhwZWN0IGEgMTY4JSBpbmNyZWFzZSBpbiB0aGUgYW1vdW50IG9mIHdvcmsgZG9uZSBieSBmbGV4aWJsZSB0YWxlbnQgKGZyZWVsYW5jZXJzLCB0ZW1wb3JhcnkgYW5kIGFnZW5jeSB3b3JrZXJzKSBpbiB0aGUgbmV4dCAxMCB5ZWFycy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICI4LiAxMiBvdXQgb2YgdGhlIHRvcCAyMCBpbi1kZW1hbmQgc2tpbGxzIGZvciBmcmVlbGFuY2VycyBhcmUgcmVsYXRlZCB0byBkZXZlbG9wbWVudCIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgImh0dHBzOi8vc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9zbGl0ZS1hcGktZmlsZXMtcHJvZHVjdGlvbi9maWxlcy85NzQzYmZmMC01YWQ5LTQ1ZDQtOTQ5Ny0yMTIyYWU4YzE5MWQvU2xpZGU2LkpQRyIsCiAgICAgICAgICAgIGFsdDogIlNsaWRlNi5KUEciCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIHRvcCBza2lsbHMgZGVzaXJlZCBieSBjb21wYW5pZXMgbG9va2luZyB0byBoaXJlIGZyZWVsYW5jZXJzIGNvbnNpc3QgcHJpbWFyaWx5IG9mIHZhcmlvdXMgdGVjaG5vbG9naWVzIGFuZCBJVC1yZWxhdGVkIHNraWxscy4gVGhleSBpbmNsdWRlIEJsb2NrY2hhaW4sIEFtYXpvbiBEeW5hbW9EQiwgUmVhY3QgTmF0aXZlLCBBbmd1bGFyLCBDb21wdXRlciBWaXNpb24sIEdvIGFtb25nIG1hbnkgb3RoZXJzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImdyYXBocy1jaGFydHMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2dyYXBocy1jaGFydHMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEdyYXBocy9DaGFydHMiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJvbCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJGcmVlbGFuY2VycyBhbGxvdyBzbWFsbCBzdGFydHVwcyB0byBidWlsZCBhbmQgc2hpcCBwcm9kdWN0cyBmYXN0IgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIlNvbWUgY29tcGFuaWVzIGFyZSBwaXZvdGluZyB0byBhIHRlYW0gb2YgZnVsbC10aW1lK2ZyZWVsYW5jZXJzIG1vZGVsIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkxhcmdlciBjb3Jwb3JhdGlvbnMgYXJlIGFsc28gZW1icmFjaW5nIHRoaXMgdHJlbmQgYW5kIGFyZSBjcmVhdGluZyBhZ2lsZSB0ZWFtcyB0byBzb2x2ZSBzcGVjaWZpYyBwcm9ibGVtcyIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJNb3JlIGFuZCBtb3JlIGRldmVsb3BlcnMgYXJlIG1vdmluZyBpbnRvIGZyZWVsYW5jaW5nIGR1ZSB0byB0aGUgZ3JlYXQgd29yay1saWZlIGJhbGFuY2UiCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiZnJlZWxhbmNpbmctaW4taW5kaWEiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2ZyZWVsYW5jaW5nLWluLWluZGlhIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgRnJlZWxhbmNpbmcgaW4gSW5kaWEiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJvbCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KCJJbmRpYSBpcyB0aGUgMiIpLAogICAgICAgICAgICBfYygic3VwIiwgW192bS5fdigibmQiKV0pLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBsYXJnZXN0IG1hcmtldCBvZiBmcmVlbGFuY2UgcHJvZmVzc2lvbmFscyAtIGF0IDE1IG1pbGxpb24sIGJlaGluZCBVUyBhdCA1MyBtaWxsaW9uLiAtICIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vaWNyaWVyLm9yZy9wZGYvT25saW5lX0ZyZWVsYW5jaW5nJTIwX0lDUklFUi5wZGYiLAogICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9pY3JpZXIub3JnL3BkZi9PbmxpbmVfRnJlZWxhbmNpbmclMjBfSUNSSUVSLnBkZiIKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIikKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJUb3Agb2NjdXBhdGlvbmFsIGNhdGVnb3J5IGluIEluZGlhIGZvciBmcmVlbGFuY2VycyBpcyBTb2Z0d2FyZSBEZXZlbG9wbWVudCAmIHRlY2guIChzYW1lIGFzIGFib3ZlKSIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJGcmVlbGFuY2luZyB3aWxsIGJlY29tZSB0aGUgVS5TLiBtYWpvcml0eSB3b3JrZm9yY2UgYnkgMjAyNy0gIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly93d3cudXB3b3JrLmNvbS9wcmVzcy8yMDE3LzEwLzE3L2ZyZWVsYW5jaW5nLWluLWFtZXJpY2EtMjAxNy8iLAogICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly93d3cudXB3b3JrLmNvbS9wcmVzcy8yMDE3LzEwLzE3L2ZyZWVsYW5jaW5nLWluLWFtZXJpY2EtMjAxNy8iCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiTWlsbGVuaWFscyBhcmUgbGVhZGluZyB0aGUgZnJlZWxhbmNpbmcgcmV2b2x1dGlvbiwgcHJvb2YgdGhhdCB3ZSB3aWxsIHNlZSByaXNlIGluIG51bWJlcnMgZXZlbiBmYXN0ZXIgYXMgdGhlIG1pbGxlbmlhbCB3b3JrZm9yY2UgZ3Jvd3MgLSAiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAgICJodHRwczovL3d3dy5jbmJjLmNvbS8yMDE5LzA4LzA3L3RoZS0xMC1jb3VudHJpZXMtd2l0aC10aGUtZmFzdGVzdC1ncm93aW5nLWVhcm5pbmdzLWZvci1mcmVlbGFuY2Vycy5odG1sIiwKICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vd3d3LmNuYmMuY29tLzIwMTkvMDgvMDcvdGhlLTEwLWNvdW50cmllcy13aXRoLXRoZS1mYXN0ZXN0LWdyb3dpbmctZWFybmluZ3MtZm9yLWZyZWVsYW5jZXJzLmh0bWwiCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigiRnJlZWxhbmNlciBlYXJuaW5ncyBncm93dGggLSAiKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vd3d3LmZvcmJlcy5jb20vc2l0ZXMvZWxhaW5lcG9mZWxkdC8yMDE5LzA4LzE4L3RoZS10b3AtMTAtZmFzdGVzdC1ncm93aW5nLWZyZWVsYW5jZS1tYXJrZXRzLWluLXRoZS13b3JsZC8jMzllMGJhNDE3MzNiIiwKICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vd3d3LmZvcmJlcy5jb20vc2l0ZXMvZWxhaW5lcG9mZWxkdC8yMDE5LzA4LzE4L3RoZS10b3AtMTAtZmFzdGVzdC1ncm93aW5nLWZyZWVsYW5jZS1tYXJrZXRzLWluLXRoZS13b3JsZC8jMzllMGJhNDE3MzNiIgogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImNvbXBhbmllcy1tYWtpbmctdGhlLXNoaWZ0IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNjb21wYW5pZXMtbWFraW5nLXRoZS1zaGlmdCIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIENvbXBhbmllcyBtYWtpbmcgdGhlIHNoaWZ0IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygib2wiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigiR29vZ2xlIGhhcyBtb3JlIGZyZWVsYW5jZXJzIHRoYW4gcGVybWFuZW50IGVtcGxveWVlcyAtICIpLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly93d3cuYmxvb21iZXJnLmNvbS9uZXdzL2FydGljbGVzLzIwMTgtMDctMjUvaW5zaWRlLWdvb2dsZS1zLXNoYWRvdy13b3JrZm9yY2UiLAogICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly93d3cuYmxvb21iZXJnLmNvbS9uZXdzL2FydGljbGVzLzIwMTgtMDctMjUvaW5zaWRlLWdvb2dsZS1zLXNoYWRvdy13b3JrZm9yY2UiCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiV29ya21hcmtldOKAmXMgMjAxNyBXb3JrZm9yY2UgUHJvZHVjdGl2aXR5IFJlcG9ydCBzdWdnZXN0cyB0aGF0IGJ1c2luZXNzZXMgdGhhdCBlbWJyYWNlIHRoZXNlIGNoYW5nZXMgYnVpbGQgbW9yZSBjb21wZXRpdGl2ZSBvcmdhbmlzYXRpb25zLCBleHBlcmllbmNlIGdyZWF0ZXIgZWZmaWNpZW5jaWVzIGFuZCBjb3N0IHNhdmluZ3MsIGFuZCBhcmUgYWJsZSB0byBkZWxpdmVyIHNwZWNpYWxpc2VkIHNraWxscyBmYXN0ZXIuIC0gIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9jb250ZW50LndvcmttYXJrZXQuY29tLzIwMTctcHJvZHVjdGl2aXR5LXJlc2VhcmNoLTEvIiwKICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vY29udGVudC53b3JrbWFya2V0LmNvbS8yMDE3LXByb2R1Y3Rpdml0eS1yZXNlYXJjaC0xLyIKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIikKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJUaGUgUkVDIChSZWNydWl0bWVudCBhbmQgRW1wbG95bWVudCBDb25mZWRlcmF0aW9uKSBiZWxpZXZlcyB0aGUgbnVtYmVyIG9mIFVLIGVtcGxveWVycyBpbnRlbmRpbmcgdG8gaW5jcmVhc2Ugb3IgbWFpbnRhaW4gdGhlaXIgdXNlIG9mIGZsZXhpYmxlIHdvcmtlcnMgd2lsbCByaXNlIHRvIDg3IHBlciBjZW50LiAtICIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vd3d3Lml0cHJvcG9ydGFsLmNvbS9mZWF0dXJlcy90b3AtdGVjaC10YWxlbnQtdHJlbmRzLTIwMjAvIiwKICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vd3d3Lml0cHJvcG9ydGFsLmNvbS9mZWF0dXJlcy90b3AtdGVjaC10YWxlbnQtdHJlbmRzLTIwMjAvIgogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIjcwJSBvZiBzbWFsbCBidXNpbmVzc2VzIGluIHRoZSBVLlMuIGhhdmUgaGlyZWQgYSBmcmVlbGFuY2VyIGluIHRoZSBwYXN0IC0gIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly93d3cubGlua2VkaW4uY29tL3Byb2ZpbmRlci9ibG9nL2hvdy1zbWFsbC1idXNpbmVzc2VzLWFyZS1sZXZlcmFnaW5nLWZyZWVsYW5jZXJzIiwKICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS9wcm9maW5kZXIvYmxvZy9ob3ctc21hbGwtYnVzaW5lc3Nlcy1hcmUtbGV2ZXJhZ2luZy1mcmVlbGFuY2VycyIKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIikKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICI4MSUgb2YgdGhlc2UgYnVzaW5lc3NlcyBwbGFuIHRvIGhpcmUgZnJlZWxhbmNlcnMgaW4gdGhlIGZ1dHVyZS4iCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkNvbnRhaW5zIG1vcmUgdXNlZnVsIHN0YXRzIildKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICI3MSBwZXJjZW50IG9mIGZyZWVsYW5jZXJzIHNheSB0aGUgYW1vdW50IG9mIHdvcmsgdGhleSB3ZXJlIGFibGUgdG8gYXR0cmFjdCBvbmxpbmUgaGFzIGluY3JlYXNlZCBvdmVyIHRoZSBsYXN0IHNldmVyYWwgeWVhcnMuIC0gaHR0cHM6Ly93d3cuYnVzaW5lc3MyY29tbXVuaXR5LmNvbS9zbWFsbC1idXNpbmVzcy9ob3ctc21hbGwtYnVzaW5lc3Nlcy1iYWxhbmNlLXRoZWlyLXN0YWZmLXdpdGgtZnJlZWxhbmNlcnMtMDIyNzQ5NDUiCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiNDglIG9mIGJ1c2luZXNzZXMgaGlyZWQgZnJlZWxhbmNlcnMgaW4gMjAxOCwgdXAgZnJvbSA0MyUgaW4gMjAxNy4gQWRkaXRpb25hbGx5LCA5IG91dCBvZiAxMCBoaXJpbmcgbWFuYWdlcnMgc3RhdGVkIHRoZXkgd2VyZSBvcGVuIHRvIGhpcmluZyBmcmVlbGFuY2VycyBvdmVyIGhpcmluZyB0ZW1wb3Jhcnkgd29ya2VycyB0aHJvdWdoIGEgc3RhZmZpbmcgZmlybSAtIFVwd29yayAyMDE4LSAiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAgICJodHRwczovL3d3dy5zbGlkZXNoYXJlLm5ldC91cHdvcmsvMjAxOC1mdXR1cmUtd29ya2ZvcmNlLXJlcG9ydC1oaXJpbmctbWFuYWdlci1pbnNpZ2h0cy1vbi1mbGV4aWJsZS1hbmQtcmVtb3RlLXdvcmstdHJlbmRzIiwKICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vd3d3LnNsaWRlc2hhcmUubmV0L3Vwd29yay8yMDE4LWZ1dHVyZS13b3JrZm9yY2UtcmVwb3J0LWhpcmluZy1tYW5hZ2VyLWluc2lnaHRzLW9uLWZsZXhpYmxlLWFuZC1yZW1vdGUtd29yay10cmVuZHMiCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAgICJodHRwczovL3d3dy5jbmJjLmNvbS8yMDE4LzEwLzIyL3NpbGljb24tdmFsbGV5LXVzaW5nLWNvbnRyYWN0LWVtcGxveWVlcy10by1kcml2ZS1wcm9maXRzLmh0bWwiLAogICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly93d3cuY25iYy5jb20vMjAxOC8xMC8yMi9zaWxpY29uLXZhbGxleS11c2luZy1jb250cmFjdC1lbXBsb3llZXMtdG8tZHJpdmUtcHJvZml0cy5odG1sIgogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJPdXRib3VuZExpbmsiKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vd3d3LndlYnNpdGVwbGFuZXQuY29tL2Jsb2cvZnJlZWxhbmNlLXN0YXRzLyIsCiAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfdm0uX3YoImh0dHBzOi8vd3d3LndlYnNpdGVwbGFuZXQuY29tL2Jsb2cvZnJlZWxhbmNlLXN0YXRzLyIpLAogICAgICAgICAgICAgICAgX2MoIk91dGJvdW5kTGluayIpCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fdigiIC0gY29sbGVjdGlvbiBvZiBvdmVyIDMwIHN0YXRzIikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0KICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}